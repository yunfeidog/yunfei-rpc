import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-BVuvStlx.js";const t={},p=e(`<h1 id="rpc框架启动机制" tabindex="-1"><a class="header-anchor" href="#rpc框架启动机制"><span>RPC框架启动机制</span></a></h1><h2 id="代码优化说明" tabindex="-1"><a class="header-anchor" href="#代码优化说明"><span>代码优化说明</span></a></h2><p>我们想要开发者可以用更少的代码就可以使用我们的RPC框架，只需要把启动的代码封装为一个专门的启动类或者函数，然后让提供者(Provider)和消费者(Consumer)来调用即可。需要注意的是，服务提供者和消费者需要初始化的模块是不同，消费者（Consumer）不需要初始化Web服务器。</p><h2 id="服务提供者启动类" tabindex="-1"><a class="header-anchor" href="#服务提供者启动类"><span>服务提供者启动类</span></a></h2><p>ServiceRegisterInfo类主要是服务名称和服务实现类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceRegisterInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 服务名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务实现类
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> implClass<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务启动的时候，将<code>ServiceRegisterInfo</code>注册到注册中心。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderBootstrap</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 初始化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceRegisterInfo</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> serviceRegisterInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// RPC初始化</span>
        <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 全局配置</span>
        <span class="token keyword">final</span> <span class="token class-name">RpcConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceRegisterInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serviceRegisterInfo <span class="token operator">:</span> serviceRegisterInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> serviceName <span class="token operator">=</span> serviceRegisterInfo<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> implClass <span class="token operator">=</span> serviceRegisterInfo<span class="token punctuation">.</span><span class="token function">getImplClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 本地注册</span>
            <span class="token class-name">LocalRegistry</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> implClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册到注册中心</span>
            <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceHost</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServicePort</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 启动服务</span>
        <span class="token class-name">VertxTcpServer</span> vertxTcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VertxTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vertxTcpServer<span class="token punctuation">.</span><span class="token function">doStart</span><span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现如下:</p><ol><li><p>初始化 RPC 应用程序:</p><ul><li>调用 <code>RpcApplication.init()</code> 方法进行全局初始化。</li></ul></li><li><p>服务注册:</p><ul><li>遍历传入的 <code>ServiceRegisterInfo</code> 列表,获取服务名和服务实现类。</li><li>将服务实现类注册到本地注册表 <code>LocalRegistry</code> 中,供 RPC 调用时使用。</li><li>根据 RPC 配置中的注册中心信息,创建对应的注册中心实例 <code>Registry</code>。</li><li>使用 <code>registry.register()</code> 方法将服务元信息(服务名、主机、端口等)注册到注册中心。</li></ul></li><li><p>启动 RPC 服务端:</p><ul><li>创建 <code>VertxTcpServer</code> 实例,它是基于 Vert.x 框架实现的 TCP 服务端。</li><li>调用 <code>vertxTcpServer.doStart()</code> 方法,并传入 RPC 配置中指定的服务端口,启动 TCP 服务端。</li></ul></li></ol><p>这个引导程序的设计目的是将 RPC 服务端的初始化和启动过程集中在一个入口类中,方便管理和扩展。它处理了服务注册、配置读取等常见的 RPC 服务端初始化逻辑,并将具体的网络通信细节委托给了 <code>VertxTcpServer</code> 类。</p><p>服务提供者初始化启动：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoreProviderExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceRegisterInfo</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> serviceRegisterInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceRegisterInfo</span> serviceRegisterInfo <span class="token operator">=</span> 
            <span class="token keyword">new</span> <span class="token class-name">ServiceRegisterInfo</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceRegisterInfos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serviceRegisterInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProviderBootstrap</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>serviceRegisterInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户在使用的时候，只需要先创建要注册的实现类，放入serviceRegisterInfos里面,然后调用 <code>ProviderBootstrap.init(serviceRegisterInfos);</code>即可</p><h2 id="服务消费者启动类" tabindex="-1"><a class="header-anchor" href="#服务消费者启动类"><span>服务消费者启动类</span></a></h2><p>消费者启动只需要初始化配置。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 服务消费者启动类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerBootstrap</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务消费者初始化启动：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoreConsumerExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConsumerBootstrap</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 代理</span>
        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;cxk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user1 <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user==null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),c=[p];function o(i,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","启动机制.html.vue"]]),d=JSON.parse('{"path":"/docs/%E5%90%AF%E5%8A%A8%E6%9C%BA%E5%88%B6.html","title":"RPC框架启动机制","lang":"en-US","frontmatter":{"date":"2024-05-04T00:00:00.000Z","title":"RPC框架启动机制","order":12,"description":"RPC框架启动机制 代码优化说明 我们想要开发者可以用更少的代码就可以使用我们的RPC框架，只需要把启动的代码封装为一个专门的启动类或者函数，然后让提供者(Provider)和消费者(Consumer)来调用即可。需要注意的是，服务提供者和消费者需要初始化的模块是不同，消费者（Consumer）不需要初始化Web服务器。 服务提供者启动类 Servic...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E5%90%AF%E5%8A%A8%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"RPC框架启动机制"}],["meta",{"property":"og:description","content":"RPC框架启动机制 代码优化说明 我们想要开发者可以用更少的代码就可以使用我们的RPC框架，只需要把启动的代码封装为一个专门的启动类或者函数，然后让提供者(Provider)和消费者(Consumer)来调用即可。需要注意的是，服务提供者和消费者需要初始化的模块是不同，消费者（Consumer）不需要初始化Web服务器。 服务提供者启动类 Servic..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:56:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RPC框架启动机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T09:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"代码优化说明","slug":"代码优化说明","link":"#代码优化说明","children":[]},{"level":2,"title":"服务提供者启动类","slug":"服务提供者启动类","link":"#服务提供者启动类","children":[]},{"level":2,"title":"服务消费者启动类","slug":"服务消费者启动类","link":"#服务消费者启动类","children":[]}],"git":{"createdTime":1714793346000,"updatedTime":1714816564000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"docs/启动机制.md","localizedDate":"May 4, 2024","excerpt":"\\n<h2>代码优化说明</h2>\\n<p>我们想要开发者可以用更少的代码就可以使用我们的RPC框架，只需要把启动的代码封装为一个专门的启动类或者函数，然后让提供者(Provider)和消费者(Consumer)来调用即可。需要注意的是，服务提供者和消费者需要初始化的模块是不同，消费者（Consumer）不需要初始化Web服务器。</p>\\n<h2>服务提供者启动类</h2>\\n<p>ServiceRegisterInfo类主要是服务名称和服务实现类</p>","autoDesc":true}');export{k as comp,d as data};
