import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as o,b as n,d as s,e as c,a}from"./app-DDYtcqrb.js";const i={},u=a('<h1 id="容错机制实现" tabindex="-1"><a class="header-anchor" href="#容错机制实现"><span>容错机制实现</span></a></h1><h2 id="什么是容错机制" tabindex="-1"><a class="header-anchor" href="#什么是容错机制"><span>什么是容错机制？</span></a></h2><p>容错机制是分布式系统设计中非常重要的一部分,它的目标是在部分组件或节点出现故障时,仍能保证系统整体的正常运转和服务可用性。</p><p>这种能力对于构建高可用、高可靠的分布式系统非常关键。</p><p>容错机制主要包括以下几个方面:</p><ol><li><p><strong>故障检测和隔离</strong>:</p><ul><li>系统需要能够及时发现和定位故障,并将故障节点或服务隔离,防止故障扩散。</li><li>可以使用心跳监测、状态检查等手段来检测故障。</li><li>当发现故障时,可以采用服务熔断、容器隔离等方式将故障节点隔离。</li></ul></li><li><p><strong>请求重试和超时控制</strong>:</p><ul><li>对于临时性的网络或服务异常,可以采用重试机制来提高成功概率。</li><li>重试策略可以是固定时间间隔、指数退避、随机等不同形式。</li><li>同时需要设置合理的超时时间,超时后放弃重试,防止无限重试耗尽资源。</li></ul></li><li><p><strong>容错路由和负载均衡</strong>:</p><ul><li>当某个服务节点出现故障时,可以通过容错路由将请求重新分配到其他可用节点。</li><li>负载均衡策略也需要考虑容错因素,例如剔除故障节点、动态调整权重等。</li></ul></li><li><p><strong>服务降级和业务兜底</strong>:</p><ul><li>当依赖的关键服务出现故障时,可以采用服务降级,临时使用备用方案或返回默认响应。</li><li>通过业务层面的兜底措施,保证核心功能的可用性。</li></ul></li><li><p><strong>资源隔离和限流</strong>:</p><ul><li>将不同服务或模块的资源进行隔离,例如使用容器、虚拟机等技术。</li><li>对关键服务实施限流,防止被大量请求冲垮。</li></ul></li><li><p><strong>数据备份和恢复</strong>:</p><ul><li>定期备份系统状态和业务数据,以便在发生故障时快速恢复。</li><li>备份方案包括数据备份、日志备份、配置备份等。</li></ul></li><li><p><strong>监控报警和自愈机制</strong>:</p><ul><li>建立完善的监控体系,实时检测系统运行状态,及时发现并报警异常。</li><li>结合其他容错手段,设计自动化的故障修复和自愈流程。</li></ul></li></ol><h2 id="为什么要容错机制" tabindex="-1"><a class="header-anchor" href="#为什么要容错机制"><span>为什么要容错机制？</span></a></h2><p>分布式系统需要使用容错机制主要有以下几个原因:</p><ol><li><p><strong>提高系统可用性</strong></p><ul><li>分布式系统由多个独立组件构成,任何一个组件的故障都可能导致整个系统不可用。</li><li>容错机制可以在部分组件出现故障时,保证系统整体仍能正常提供服务,提高可用性。</li></ul></li><li><p><strong>降低故障影响</strong></p><ul><li>在分布式环境下,一个故障可能会通过调用链在系统中传播,导致级联故障。</li><li>容错机制可以及时隔离故障,阻止其扩散,降低故障对整个系统的影响。</li></ul></li><li><p><strong>增强系统弹性</strong></p><ul><li>分布式系统面临各种不确定因素,如网络延迟、服务器故障等。</li><li>容错机制可以让系统在面对这些不确定性时,仍能保持稳定和可靠的运行。</li></ul></li><li><p><strong>支持高并发和扩展性</strong></p><ul><li>分布式系统通常需要支持高并发访问和动态扩展。</li><li>容错机制可以在系统扩展或负载增大时,确保服务质量不会下降。</li></ul></li><li><p><strong>满足业务连续性要求</strong></p><ul><li>许多关键业务系统需要实现7*24小时的持续运行。</li><li>容错机制可以确保业务在出现故障时仍能快速恢复,减少业务中断。</li></ul></li><li><p><strong>降低运维成本</strong></p><ul><li>容错机制可以自动化地处理和修复故障,减少人工介入。</li><li>这可以降低系统维护的人力和时间成本。</li></ul></li></ol><p>容错机制是构建高可用、高可靠分布式系统的关键所在。它可以显著提高系统的抗风险能力,确保业务连续性,为用户提供稳定可靠的服务。这对于许多关键性的分布式应用来说是非常必要的。</p><h2 id="容错机制有哪些" tabindex="-1"><a class="header-anchor" href="#容错机制有哪些"><span>容错机制有哪些？</span></a></h2><p>参考Dubbo的实现，</p>',12),r={href:"https://cn.dubbo.apache.org/zh-cn/blog/2018/08/22/dubbo-%e9%9b%86%e7%be%a4%e5%ae%b9%e9%94%99/",target:"_blank",rel:"noopener noreferrer"},k=a(`<ol><li><p><strong>Failover (失败自动切换)</strong>:</p><ul><li>当某个服务提供者出现故障时,自动切换到备用的服务提供者。</li><li>这样可以在某个节点出现问题时,保证服务的可用性。</li><li>通常会配合负载均衡策略使用,确保流量能够自动分配到可用的节点上。</li></ul></li><li><p><strong>Failsafe (失败安全)</strong>:</p><ul><li>当服务调用出现异常时,直接返回一个安全的默认值或者空值。</li><li>这种策略适用于一些对结果容忍度较高的场景,比如日志记录、缓存预热等。</li><li>通过快速返回,可以避免阻塞调用链,提高系统的整体可用性。</li></ul></li><li><p><strong>Failfast (快速失败)</strong>:</p><ul><li>当服务调用出现异常时,立即抛出异常,不进行重试或降级。</li><li>这种策略适用于对响应时间敏感的场景,比如用户交互界面。</li><li>快速失败可以减少系统资源的占用,但需要在上层进行更好的异常处理。</li></ul></li><li><p><strong>Failback (失败自动恢复)</strong>:</p><ul><li>当服务提供者恢复正常后,自动恢复对该服务的调用。</li><li>这种策略通常与Failover一起使用,可以在故障恢复后,自动切换回正常的服务节点。</li><li>这样可以最大程度地减少服务中断的时间。</li></ul></li><li><p><strong>Forking (并行调用)</strong>:</p><ul><li>当调用一个服务时,同时向多个服务提供者发起并行调用。</li><li>只要有一个调用成功,就返回结果,其他的调用则会被取消。</li><li>这种策略可以提高服务的可靠性,但会增加资源消耗。适用于对响应时间有严格要求的场景。</li></ul></li><li><p><strong>Broadcast (广播调用)</strong>:</p><ul><li>当调用一个服务时,向所有已知的服务提供者发起调用。</li><li>所有提供者的响应都会被收集和合并,返回给调用方。</li><li>这种策略可以提高服务的可用性,但会增加网络开销。适用于需要聚合多个服务结果的场景。</li></ul></li></ol><h2 id="容错方案的设计" tabindex="-1"><a class="header-anchor" href="#容错方案的设计"><span>容错方案的设计</span></a></h2><ol><li><p>先容错再重试</p></li><li><p>先重试再容错</p></li></ol><h2 id="容错机制实现-1" tabindex="-1"><a class="header-anchor" href="#容错机制实现-1"><span>容错机制实现</span></a></h2><p>除了上述的策略之外，很多 技术都可以算得上是容错，例如：</p><ol><li>重试：重试本身就是容错的降级策略，系统出现错误后再重试</li><li>限流：如果系统压力过大，已经出现部分错误，那么可以限制请求的频率数量来进行保护</li><li>降级：出现错误之后，可以变成执行其他更稳定 的操作，也称兜底，</li><li>熔断：出现故障或者异常，暂停服务，避免连锁故障</li><li>超时控制：长时间没有处理完成，就中断，防止阻塞和资源占用</li></ol><h3 id="容错策略接口定义" tabindex="-1"><a class="header-anchor" href="#容错策略接口定义"><span>容错策略接口定义</span></a></h3><p>我们定义的 <code>TolerantStrategy</code> 接口主要有两个参数：</p><ol><li><p><code>Map&lt;String, Object&gt; context</code></p><ul><li>这个参数是一个上下文对象,用于在容错处理过程中传递一些数据。</li><li>在分布式系统中,当一个远程调用出现异常时,我们需要根据当前的上下文信息来决定如何进行容错处理。</li><li>这个上下文可以包含一些关键信息,例如: <ul><li>当前请求的参数</li><li>调用链路信息</li><li>服务实例的元数据</li><li>重试次数等</li></ul></li><li>通过这个上下文对象,容错策略实现可以获取到更丰富的信息,从而做出更加合理的容错决策。</li></ul></li><li><p><code>Exception e</code></p><ul><li>这个参数表示在执行远程调用时出现的异常。</li><li>容错策略需要根据异常的类型、错误信息等,来决定采取什么样的容错措施。</li><li>例如,对于网络异常可以选择重试,而对于业务异常可能需要降级或返回默认响应。</li><li>通过分析异常信息,容错策略可以更有针对性地进行容错处理。</li></ul></li><li><p><code>RpcResponse doTolerant(Map&lt;String, Object&gt; context, Exception e)</code></p><ul><li>这个方法定义了容错处理的具体实现。</li><li>它接收上下文信息和异常对象作为参数,并返回一个 <code>RpcResponse</code> 作为处理结果。</li><li>容错策略的实现者需要根据具体的业务需求和故障情况,编写相应的容错逻辑,并返回一个合适的响应结果。</li></ul></li></ol><p>总的来说,这个 <code>TolerantStrategy</code> 接口为容错处理提供了一个标准的抽象和扩展点。通过传入上下文信息和异常对象,容错策略的实现者可以更灵活地根据不同的场景,制定出适合自己系统的容错机制。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TolerantStrategy</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 容错处理
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> 上下文，用于传递数据
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> 异常
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">RpcResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速失败策略" tabindex="-1"><a class="header-anchor" href="#快速失败策略"><span>快速失败策略</span></a></h3><p>打印一个日志，直接抛异常出去。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 快速失败
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailFastTolerantStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">TolerantStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 快速失败 -立刻通知调用方失败
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> 上下文，用于传递数据
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>       异常
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FailFastTolerantStrategy doTolerant&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;FailFastTolerantStrategy doTolerant&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静默处理策略" tabindex="-1"><a class="header-anchor" href="#静默处理策略"><span>静默处理策略</span></a></h3><p>静默处理策略提供了一种安静而高效的容错处理方式，再需要容错的时候，我们返回一个默认的RpcResponse即可，可以通过构造函数传入</p><p>静默处理策略的特点是:</p><ol><li><p><strong>不通知调用方失败</strong>:</p><ul><li>当服务调用出现异常时,不会抛出异常,也不会返回错误响应。</li><li>而是直接返回一个默认的响应结果。</li></ul></li><li><p><strong>只记录日志</strong>:</p><ul><li>异常信息仅仅通过日志的形式记录下来,方便事后排查问题。</li><li>但不会将异常信息直接返回给调用方。</li></ul></li><li><p><strong>适用场景</strong>:</p><ul><li>这种策略适用于对最终结果不太敏感的场景,比如日志记录、缓存预热等。</li><li>即使服务调用失败,也不会影响业务的核心逻辑。</li></ul></li><li><p><strong>优缺点</strong>:</p><ul><li>优点是简单易实现,对系统负载影响小。</li><li>缺点是可能会丢失一些有价值的业务信息,无法保证最终一致性。</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 静默处理
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailSilentTolerantStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">TolerantStrategy</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RpcResponse</span> defaultResponse<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FailSilentTolerantStrategy</span><span class="token punctuation">(</span><span class="token class-name">RpcResponse</span> rpcResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultResponse <span class="token operator">=</span> rpcResponse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">FailSilentTolerantStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 静默处理 - 不通知调用方失败，只记录日志
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> 上下文，用于传递数据
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>       异常
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;FailSafeTolerantStrategy doTolerant&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> defaultResponse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="故障恢复策略" tabindex="-1"><a class="header-anchor" href="#故障恢复策略"><span>故障恢复策略</span></a></h3><p>故障恢复是容错机制的一个重要组成部分,它的目的是在服务出现故障时,能够快速恢复服务的正常运行,减少业务中断时间。</p><p>我们在重试策略失败的时候，这个时候触发容错策略，可以把我们的上下文传过来 ，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 发送TCP请求</span>
<span class="token comment">// 使用重试策略</span>
<span class="token class-name">RpcResponse</span> response <span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">RetryStrategy</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getRetryStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> retryStrategy<span class="token punctuation">.</span><span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">VertxTcpClient</span><span class="token punctuation">.</span><span class="token function">doRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TolerantStrategy</span> strategy <span class="token operator">=</span> <span class="token class-name">TolerantStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getTolerantStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 构造上下文</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">SERVICE_LIST</span><span class="token punctuation">,</span> serviceMetaInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">CURRENT_SERVICE</span><span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">RPC_REQUEST</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">doTolerant</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后去获取所有的服务列表，只要不是当前的服务，都可以重试一次，如果都失败，那就直接抛异常，不重试了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 故障转移
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailOverTolerantStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">TolerantStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 故障转移 - 重试其他服务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> 上下文，用于传递数据
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>       异常
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> metaInfos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">SERVICE_LIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceMetaInfo</span> metaInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">CURRENT_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequest</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">RPC_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>metaInfos <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> metaInfos<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant metaInfos is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 重试metaInfo之外的其他服务</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> metaInfos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 重试</span>
            <span class="token class-name">RetryStrategy</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRetryStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> retryStrategy<span class="token punctuation">.</span><span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">VertxTcpClient</span><span class="token punctuation">.</span><span class="token function">doRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果重试再失败，继续重试下一个</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant retry fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 所有服务都重试失败</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant all retry fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="失败恢复策略" tabindex="-1"><a class="header-anchor" href="#失败恢复策略"><span>失败恢复策略</span></a></h3><p>这种策略和故障恢复差不多，都是尝试其他服务，只不过这个在故障服务恢复正常后触发,目的是将流量切换回原来的服务实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 降级到其他服务
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FailBackTolerantStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">TolerantStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 降级到其他服务 - 重试其他服务
     *
     * <span class="token keyword">@param</span> <span class="token parameter">context</span> 上下文，用于传递数据
     * <span class="token keyword">@param</span> <span class="token parameter">e</span>       异常
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doTolerant</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> metaInfos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">SERVICE_LIST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceMetaInfo</span> metaInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">CURRENT_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequest</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">RPC_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>metaInfos <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> metaInfos<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant metaInfos is empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 重试metaInfo之外的其他服务</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> metaInfos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 重试</span>
            <span class="token class-name">RetryStrategy</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRetryStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> retryStrategy<span class="token punctuation">.</span><span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">VertxTcpClient</span><span class="token punctuation">.</span><span class="token function">doRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果重试再失败，继续重试下一个</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant retry fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 所有服务都重试失败</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;FailOverTolerantStrategy doTolerant all retry fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function d(m,v){const t=p("ExternalLinkIcon");return l(),o("div",null,[u,n("p",null,[s("在Dubbo的文档中也介绍了这些容错策略："),n("a",r,[s("https://cn.dubbo.apache.org/zh-cn/blog/2018/08/22/dubbo-集群容错/"),c(t)])]),k])}const y=e(i,[["render",d],["__file","容错机制.html.vue"]]),f=JSON.parse('{"path":"/docs/%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6.html","title":"容错机制实现","lang":"en-US","frontmatter":{"date":"2024-05-03T00:00:00.000Z","title":"容错机制实现","order":9,"description":"容错机制实现 什么是容错机制？ 容错机制是分布式系统设计中非常重要的一部分,它的目标是在部分组件或节点出现故障时,仍能保证系统整体的正常运转和服务可用性。 这种能力对于构建高可用、高可靠的分布式系统非常关键。 容错机制主要包括以下几个方面: 故障检测和隔离: 系统需要能够及时发现和定位故障,并将故障节点或服务隔离,防止故障扩散。 可以使用心跳监测、状态...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"容错机制实现"}],["meta",{"property":"og:description","content":"容错机制实现 什么是容错机制？ 容错机制是分布式系统设计中非常重要的一部分,它的目标是在部分组件或节点出现故障时,仍能保证系统整体的正常运转和服务可用性。 这种能力对于构建高可用、高可靠的分布式系统非常关键。 容错机制主要包括以下几个方面: 故障检测和隔离: 系统需要能够及时发现和定位故障,并将故障节点或服务隔离,防止故障扩散。 可以使用心跳监测、状态..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T08:42:54.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T08:42:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容错机制实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T08:42:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"什么是容错机制？","slug":"什么是容错机制","link":"#什么是容错机制","children":[]},{"level":2,"title":"为什么要容错机制？","slug":"为什么要容错机制","link":"#为什么要容错机制","children":[]},{"level":2,"title":"容错机制有哪些？","slug":"容错机制有哪些","link":"#容错机制有哪些","children":[]},{"level":2,"title":"容错方案的设计","slug":"容错方案的设计","link":"#容错方案的设计","children":[]},{"level":2,"title":"容错机制实现","slug":"容错机制实现-1","link":"#容错机制实现-1","children":[{"level":3,"title":"容错策略接口定义","slug":"容错策略接口定义","link":"#容错策略接口定义","children":[]},{"level":3,"title":"快速失败策略","slug":"快速失败策略","link":"#快速失败策略","children":[]},{"level":3,"title":"静默处理策略","slug":"静默处理策略","link":"#静默处理策略","children":[]},{"level":3,"title":"故障恢复策略","slug":"故障恢复策略","link":"#故障恢复策略","children":[]},{"level":3,"title":"失败恢复策略","slug":"失败恢复策略","link":"#失败恢复策略","children":[]}]}],"git":{"createdTime":1714705973000,"updatedTime":1714812174000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":2}]},"readingTime":{"minutes":11.2,"words":3360},"filePathRelative":"docs/容错机制.md","localizedDate":"May 3, 2024","excerpt":"\\n<h2>什么是容错机制？</h2>\\n<p>容错机制是分布式系统设计中非常重要的一部分,它的目标是在部分组件或节点出现故障时,仍能保证系统整体的正常运转和服务可用性。</p>\\n<p>这种能力对于构建高可用、高可靠的分布式系统非常关键。</p>\\n<p>容错机制主要包括以下几个方面:</p>\\n<ol>\\n<li>\\n<p><strong>故障检测和隔离</strong>:</p>\\n<ul>\\n<li>系统需要能够及时发现和定位故障,并将故障节点或服务隔离,防止故障扩散。</li>\\n<li>可以使用心跳监测、状态检查等手段来检测故障。</li>\\n<li>当发现故障时,可以采用服务熔断、容器隔离等方式将故障节点隔离。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>请求重试和超时控制</strong>:</p>\\n<ul>\\n<li>对于临时性的网络或服务异常,可以采用重试机制来提高成功概率。</li>\\n<li>重试策略可以是固定时间间隔、指数退避、随机等不同形式。</li>\\n<li>同时需要设置合理的超时时间,超时后放弃重试,防止无限重试耗尽资源。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>容错路由和负载均衡</strong>:</p>\\n<ul>\\n<li>当某个服务节点出现故障时,可以通过容错路由将请求重新分配到其他可用节点。</li>\\n<li>负载均衡策略也需要考虑容错因素,例如剔除故障节点、动态调整权重等。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>服务降级和业务兜底</strong>:</p>\\n<ul>\\n<li>当依赖的关键服务出现故障时,可以采用服务降级,临时使用备用方案或返回默认响应。</li>\\n<li>通过业务层面的兜底措施,保证核心功能的可用性。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>资源隔离和限流</strong>:</p>\\n<ul>\\n<li>将不同服务或模块的资源进行隔离,例如使用容器、虚拟机等技术。</li>\\n<li>对关键服务实施限流,防止被大量请求冲垮。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>数据备份和恢复</strong>:</p>\\n<ul>\\n<li>定期备份系统状态和业务数据,以便在发生故障时快速恢复。</li>\\n<li>备份方案包括数据备份、日志备份、配置备份等。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>监控报警和自愈机制</strong>:</p>\\n<ul>\\n<li>建立完善的监控体系,实时检测系统运行状态,及时发现并报警异常。</li>\\n<li>结合其他容错手段,设计自动化的故障修复和自愈流程。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{y as comp,f as data};
