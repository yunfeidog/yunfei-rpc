import{_ as e}from"./rpcconfig-CajM4jt9.js";import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as n,b as s,d as t,e as a}from"./app-BVuvStlx.js";const u={},k=a('<h1 id="全局配置加载" tabindex="-1"><a class="header-anchor" href="#全局配置加载"><span>全局配置加载</span></a></h1><h2 id="为什么要全局配置加载" tabindex="-1"><a class="header-anchor" href="#为什么要全局配置加载"><span>为什么要全局配置加载？</span></a></h2><p>在开发 RPC 框架时需要引入全局配置加载的功能主要有以下几个原因:</p><ol><li><p>配置信息繁多:</p><ul><li>RPC 框架需要涉及很多配置信息,如注册中心地址、序列化方式、网络服务端口号等。</li><li>如果直接在代码中硬编码这些配置,不利于后期维护和扩展。</li></ul></li><li><p>支持自定义配置:</p><ul><li>RPC 框架需要被其他项目引入使用,作为服务提供者或消费者。</li><li>引入框架的项目应该能够通过配置文件自定义 RPC 框架的配置,而不是强制使用框架中的硬编码配置。</li></ul></li><li><p>统一配置管理:</p><ul><li>服务提供者和服务消费者需要使用相同的 RPC 框架配置,以保证网络通信的一致性。</li><li>因此需要一个统一的全局配置对象,方便框架内部各组件快速获取一致的配置信息。</li></ul></li><li><p>配置文件读取:</p><ul><li>RPC 框架需要能够从配置文件中读取配置信息,并将其转换为Java对象。</li><li>使用通用的配置读取工具(如Hutool)可以简化这个过程,提高代码复用性。</li></ul></li></ol><h2 id="如何设计" tabindex="-1"><a class="header-anchor" href="#如何设计"><span>如何设计？</span></a></h2>',5),r={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/overview/",target:"_blank",rel:"noopener noreferrer"},d=a('<p>在本RPC框架中，我们主要做了以下一些配置：</p><p><code>RpcConfig</code> 类是 RPC 框架的全局配置类,它包含了 RPC 框架中很多重要的配置项。</p><ol><li><p><strong>名称和版本</strong>:</p><ul><li><code>name</code> 和 <code>version</code> 属性用于标识 RPC 框架的名称和版本号。这些信息可以在日志、监控等场景中使用。</li></ul></li><li><p><strong>服务器配置</strong>:</p><ul><li><code>serverHost</code> 和 <code>serverPort</code> 定义了 RPC 服务器的主机和端口信息。这是 RPC 服务提供者端的必要配置。</li></ul></li><li><p><strong>模拟调用</strong>:</p><ul><li><code>mock</code> 属性用于控制是否开启模拟调用模式,可在测试或者特殊场景下使用。</li></ul></li><li><p><strong>序列化配置</strong>:</p><ul><li><code>serializer</code> 属性指定了默认的序列化实现,可以选择 <code>SerializerKeys</code> 中定义的不同序列化方式,如 JDK、Kryo 等。</li></ul></li><li><p><strong>注册中心配置</strong>:</p><ul><li><code>registryConfig</code> 属性包含了服务注册中心的配置信息,如地址、凭证等。这是 RPC 的关键功能之一。</li></ul></li><li><p><strong>负载均衡配置</strong>:</p><ul><li><code>loadBalancer</code> 属性指定了默认的负载均衡策略,可以选择 <code>LoadBalancerKeys</code> 中定义的不同策略,如轮询、随机等。</li></ul></li><li><p><strong>容错策略配置</strong>:</p><ul><li><code>retryStrategy</code> 属性用于配置服务调用的重试策略,如 <code>RetryStrategyKeys</code> 中定义的不重试、有限重试等。</li><li><code>tolerantStrategy</code> 属性用于配置服务调用的容错策略,如 <code>TolerantStrategyKeys</code> 中定义的快速失败、熔断等。</li></ul></li></ol><p>这个 <code>RpcConfig</code> 类将 RPC 框架中的各种重要配置项集中在一起,使得整个框架的配置管理更加集中和便捷。开发者可以根据具体需求,灵活地配置不同的序列化、负载均衡、容错等策略,从而满足不同应用场景的需求。</p><p>为了更直观表示我们整个系统的配置，我画了一张框架图：</p><p><img src="'+e+`" alt="rpcconfig.svg"></p><p>上面这些只是Rpc的配置，除此之外，我们还需要一个RpcApplication 类来管理 RPC 框架的入口和全局配置管理器，我们希望在里面可以集中管理这些配置选项，并且可以轻松获取这些选项，例如</p><ul><li>初始化Rpc配置信息</li><li>通过单例模式来获取上述的Rpc配置信息</li></ul><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><p>RpcConfig类代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * RPC配置
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;yunfei-rpc&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 版本号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务器主机
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serverHost <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务器端口
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> serverPort <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 模拟调用
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 序列化器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerKeys</span><span class="token punctuation">.</span><span class="token constant">JDK</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注册中心配置
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 负载均衡器
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> loadBalancer <span class="token operator">=</span> <span class="token class-name">LoadBalancerKeys</span><span class="token punctuation">.</span><span class="token constant">ROUND_ROBIN</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 重试策略
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyKeys</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 容错策略
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tolerantStrategy <span class="token operator">=</span> <span class="token class-name">TolerantStrategyKeys</span><span class="token punctuation">.</span><span class="token constant">FAIL_FAST</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RpcApplication类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * RPC应用
 * 相当于holder ,存放了项目全局用到的变量，双检锁实现单例
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">RpcConfig</span> rpcConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RpcConfig</span> newRpcConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rpcConfig <span class="token operator">=</span> newRpcConfig<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;rpc application init success,config:{}&quot;</span><span class="token punctuation">,</span> rpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// // 注册中心初始化</span>
        <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;registry init success,config:{}&quot;</span><span class="token punctuation">,</span> registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建并 注册Shutdown Hook ,JVM 退出时执行擦欧总</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>registry<span class="token operator">::</span><span class="token function">destroy</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 初始化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RpcConfig</span> newRpcConfig<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            newRpcConfig <span class="token operator">=</span> <span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">RpcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CONFIG_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 读取配置文件失败，使用默认配置</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;load config error,use default config&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newRpcConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">init</span><span class="token punctuation">(</span>newRpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取配置
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RpcConfig</span> <span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> rpcConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解释：</p><ol><li><strong>单例模式实现</strong>: <ul><li><code>rpcConfig</code> 是一个静态的 <code>volatile</code> 变量,用于存储全局的 <code>RpcConfig</code> 配置对象。</li><li><code>getRpcConfig()</code> 方法使用了双重检查锁的单例模式实现,确保 <code>rpcConfig</code> 对象的唯一性。</li></ul></li><li><strong>初始化方法</strong>: <ul><li><code>init(RpcConfig newRpcConfig)</code> 方法用于初始化 RPC 应用,接受一个 <code>RpcConfig</code> 对象作为参数。</li><li>然后根据 <code>registryConfig</code> 创建并初始化注册中心实例。</li><li>最后注册一个 JVM 关闭钩子,在 JVM 退出时自动销毁注册中心实例。</li></ul></li><li><strong>自动初始化</strong>: <ul><li><code>init()</code> 方法用于自动初始化 RPC 应用。</li><li>首先尝试使用 <code>ConfigUtils.loadConfig()</code> 方法从默认的配置文件路径加载 <code>RpcConfig</code> 对象。</li><li>如果加载失败,则创建一个默认的 <code>RpcConfig</code> 对象。</li></ul></li></ol><p>这个 <code>RpcApplication</code> 类是整个 RPC 框架的核心入口点。它负责管理全局的 <code>RpcConfig</code> 配置对象,同时还负责初始化注册中心实例并确保其生命周期与 JVM 保持一致。这种设计模式能够确保整个 RPC 框架的配置管理和初始化过程是统一和可靠的。</p><p>我们再来看看如何从配置文件中读取信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> newRpcConfig <span class="token operator">=</span> <span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">RpcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_CONFIG_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于propertities文件的读取比较 简单，可以直接使用Hutool工具类实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> configFileBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Props</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Props</span><span class="token punctuation">(</span>configFileBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> props<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>tClass<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s2.loli.net/2024/05/02/SoTKRVMGy7IQuL2.webp" alt=""></p><p>读取yml文件需要引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取配置文件的完整代码如下：</p>`,24),m={href:"https://github.com/liyupi/yu-rpc/blob/b5e9d7bd992c07fcac54807d91ca16bf80abf5f9/yu-rpc-core/src/main/java/com/yupi/yurpc/utils/ConfigUtils.java",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yunfei<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>resource<span class="token punctuation">.</span></span><span class="token class-name">NoResourceException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>setting<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span></span><span class="token class-name">Props</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>setting<span class="token punctuation">.</span>yaml<span class="token punctuation">.</span></span><span class="token class-name">YamlUtil</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 配置工具类
 * 加载配置文件规则：
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>conf/application.properties &gt;
 * application.properties &gt;
 * conf/application.yaml &gt;
 * application.yaml &gt;
 * conf/application.yml &gt;
 * application.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BASE_PATH_DIR</span> <span class="token operator">=</span> <span class="token string">&quot;conf/&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BASE_CONF_FILE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;application&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PROPERTIES_FILE_EXT</span> <span class="token operator">=</span> <span class="token string">&quot;.properties&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YAML_FILE_EXT</span> <span class="token operator">=</span> <span class="token string">&quot;.yaml&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YML_FILE_EXT</span> <span class="token operator">=</span> <span class="token string">&quot;.yml&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ENV_SPLIT</span> <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 加载配置
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载配置
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 优先加载 properties, 找不到再加载 yaml / yml
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>    environment
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> props<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>props <span class="token operator">=</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> props <span class="token operator">:</span> <span class="token function">loadYaml</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载 properties 配置 application-<span class="token punctuation">{</span>env<span class="token punctuation">}</span>.properties
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 优先加载 conf/conf.properties, 找不到再加载 conf.properties
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>    environment
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadProperties</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_PATH_DIR</span> <span class="token operator">+</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Not exists properties conf file in [{}], will load properties file from classpath&quot;</span><span class="token punctuation">,</span>
                    <span class="token constant">BASE_PATH_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadProperties</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Not exists properties conf file,  will load yaml/yml file from classpath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载 yaml 配置 application-<span class="token punctuation">{</span>env<span class="token punctuation">}</span>.yaml / application-<span class="token punctuation">{</span>env<span class="token punctuation">}</span>.yml
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 优先加载 conf/conf.yaml, 找不到再加载 conf.yaml，其次加载 conf/conf.yml, 找不到再加载 conf.yml
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>    environment
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">loadYaml</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取 yaml 文件，优先读取 conf/application-{env}.yaml</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadYaml</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_PATH_DIR</span> <span class="token operator">+</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">,</span>
                    <span class="token constant">YAML_FILE_EXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Not exists yaml conf file in [{}], will load yaml file from classpath&quot;</span><span class="token punctuation">,</span>
                    <span class="token constant">BASE_PATH_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 加载 application-{env}.yaml 文件</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadYaml</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">,</span>
                    <span class="token constant">YAML_FILE_EXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Not exists yaml conf file in [{}], will load yml file&quot;</span><span class="token punctuation">,</span> <span class="token constant">BASE_PATH_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 读取 yml 文件，优先读取 conf/application-{env}.yml</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadYaml</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_PATH_DIR</span> <span class="token operator">+</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">,</span>
                    <span class="token constant">YML_FILE_EXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Not exists yml conf file in [{}], will load yml file from classpath&quot;</span><span class="token punctuation">,</span>
                    <span class="token constant">BASE_PATH_DIR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 加载 application-{env}.yml 文件</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">doLoadYaml</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token constant">BASE_CONF_FILE_NAME</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> env<span class="token punctuation">,</span>
                    <span class="token constant">YML_FILE_EXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoResourceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;no conf file!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载 properties 配置 application-<span class="token punctuation">{</span>env<span class="token punctuation">}</span>.properties
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">base</span>   base path
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>    environment
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">doLoadProperties</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> base<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">NoResourceException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> confFilePath <span class="token operator">=</span> <span class="token function">buildConfigFilePath</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> env<span class="token punctuation">,</span> <span class="token constant">PROPERTIES_FILE_EXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Props</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Props</span><span class="token punctuation">(</span>confFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> props<span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 加载 yaml 配置 application-<span class="token punctuation">{</span>ev<span class="token punctuation">}</span>.yaml / application-<span class="token punctuation">{</span>env<span class="token punctuation">}</span>.yml
     *
     * <span class="token keyword">@param</span> <span class="token parameter">clazz</span>  clazz
     * <span class="token keyword">@param</span> <span class="token parameter">base</span>   base path
     * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> properties common prefix
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>    environment
     * <span class="token keyword">@param</span> <span class="token parameter">ext</span>    file extension
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span>    T
     * <span class="token keyword">@return</span> props
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">doLoadYaml</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> base<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">,</span>
                                   <span class="token class-name">String</span> ext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoResourceException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> confFilePath <span class="token operator">=</span> <span class="token function">buildConfigFilePath</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> env<span class="token punctuation">,</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> <span class="token class-name">YamlUtil</span><span class="token punctuation">.</span><span class="token function">loadByPath</span><span class="token punctuation">(</span>confFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> rpcConfigProps <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">parseObj</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>rpcConfigProps<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 构建配置文件路径
     *
     * <span class="token keyword">@param</span> <span class="token parameter">base</span> base path
     * <span class="token keyword">@param</span> <span class="token parameter">env</span>  environment
     * <span class="token keyword">@param</span> <span class="token parameter">ext</span>  file extension
     * <span class="token keyword">@return</span> config file path
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildConfigFilePath</span><span class="token punctuation">(</span><span class="token class-name">String</span> base<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">,</span> <span class="token class-name">String</span> ext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> configFileBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">ENV_SPLIT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        configFileBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> configFileBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">loadYaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RpcConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">ConfigUtils</span><span class="token punctuation">.</span><span class="token function">loadYaml</span><span class="token punctuation">(</span><span class="token class-name">RpcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;rpc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="https://s2.loli.net/2024/05/02/NDb7psTaOeYFE5q.webp" alt="image-20240502153844007"></p>`,5);function b(g,y){const p=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[s("参考Dubbo的设计方案："),n("a",r,[s("https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/overview/"),t(p)])]),d,n("p",null,[s("参考："),n("a",m,[s("github"),t(p)])]),v])}const R=c(u,[["render",b],["__file","全局配置加载.html.vue"]]),h=JSON.parse('{"path":"/docs/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD.html","title":"全局配置加载","lang":"en-US","frontmatter":{"date":"2024-05-02T00:00:00.000Z","title":"全局配置加载","order":3,"description":"全局配置加载 为什么要全局配置加载？ 在开发 RPC 框架时需要引入全局配置加载的功能主要有以下几个原因: 配置信息繁多: RPC 框架需要涉及很多配置信息,如注册中心地址、序列化方式、网络服务端口号等。 如果直接在代码中硬编码这些配置,不利于后期维护和扩展。 支持自定义配置: RPC 框架需要被其他项目引入使用,作为服务提供者或消费者。 引入框架的项...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"全局配置加载"}],["meta",{"property":"og:description","content":"全局配置加载 为什么要全局配置加载？ 在开发 RPC 框架时需要引入全局配置加载的功能主要有以下几个原因: 配置信息繁多: RPC 框架需要涉及很多配置信息,如注册中心地址、序列化方式、网络服务端口号等。 如果直接在代码中硬编码这些配置,不利于后期维护和扩展。 支持自定义配置: RPC 框架需要被其他项目引入使用,作为服务提供者或消费者。 引入框架的项..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/05/02/SoTKRVMGy7IQuL2.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:56:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"全局配置加载\\",\\"image\\":[\\"https://s2.loli.net/2024/05/02/SoTKRVMGy7IQuL2.webp\\",\\"https://s2.loli.net/2024/05/02/NDb7psTaOeYFE5q.webp\\"],\\"datePublished\\":\\"2024-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T09:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"为什么要全局配置加载？","slug":"为什么要全局配置加载","link":"#为什么要全局配置加载","children":[]},{"level":2,"title":"如何设计？","slug":"如何设计","link":"#如何设计","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}],"git":{"createdTime":1714635628000,"updatedTime":1714816564000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":7.68,"words":2304},"filePathRelative":"docs/全局配置加载.md","localizedDate":"May 2, 2024","excerpt":"\\n<h2>为什么要全局配置加载？</h2>\\n<p>在开发 RPC 框架时需要引入全局配置加载的功能主要有以下几个原因:</p>\\n<ol>\\n<li>\\n<p>配置信息繁多:</p>\\n<ul>\\n<li>RPC 框架需要涉及很多配置信息,如注册中心地址、序列化方式、网络服务端口号等。</li>\\n<li>如果直接在代码中硬编码这些配置,不利于后期维护和扩展。</li>\\n</ul>\\n</li>\\n<li>\\n<p>支持自定义配置:</p>\\n<ul>\\n<li>RPC 框架需要被其他项目引入使用,作为服务提供者或消费者。</li>\\n<li>引入框架的项目应该能够通过配置文件自定义 RPC 框架的配置,而不是强制使用框架中的硬编码配置。</li>\\n</ul>\\n</li>\\n<li>\\n<p>统一配置管理:</p>\\n<ul>\\n<li>服务提供者和服务消费者需要使用相同的 RPC 框架配置,以保证网络通信的一致性。</li>\\n<li>因此需要一个统一的全局配置对象,方便框架内部各组件快速获取一致的配置信息。</li>\\n</ul>\\n</li>\\n<li>\\n<p>配置文件读取:</p>\\n<ul>\\n<li>RPC 框架需要能够从配置文件中读取配置信息,并将其转换为Java对象。</li>\\n<li>使用通用的配置读取工具(如Hutool)可以简化这个过程,提高代码复用性。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{R as comp,h as data};
