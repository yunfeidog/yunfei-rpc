import{a as n,_ as s,b as a}from"./encode1-Blg3FyDK.js";import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,a as c}from"./app-OThu-93n.js";const o={},l=c('<h1 id="自定义协议-重点" tabindex="-1"><a class="header-anchor" href="#自定义协议-重点"><span>自定义协议(重点)</span></a></h1><h2 id="一些协议概念" tabindex="-1"><a class="header-anchor" href="#一些协议概念"><span>一些协议概念</span></a></h2><ul><li><p><strong>RPC(Remote Procedure Call Protocol)远程过程调用协议</strong>。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。</p></li><li><p><strong>HTTP（超文本传输协议，Hypertext Transfer Protocol</strong>是一种用于从网络传输超文本到本地浏览器的传输协议。它定义了客户端与服务器之间请求和响应的格式。HTTP 工作在 TCP/IP 模型之上，通常使用端口 <strong>80</strong>。</p></li><li><p><strong>传输控制协议（TCP，Transmission Control Protocol</strong>是一种面向连接的、可靠的、基于字节流的传输层通信协议，</p></li><li><p><strong>UDP(User Datagram Protocol)即用户数据报协议</strong>，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。</p></li></ul><blockquote><ul><li>HTTP只是一个通信协议，工作在OSI的第七层，不是一个完整的远程调用方案。</li></ul><ul><li>其实rpc不是一种协议，rpc是一种调用过程的方案/范式/实现。RPC是一个完整的远程调用方案，它包括了：接口规范+序列化反序列化规范+通信协议等。</li></ul></blockquote><h2 id="为什么要自定义rpc协议" tabindex="-1"><a class="header-anchor" href="#为什么要自定义rpc协议"><span>为什么要自定义RPC协议</span></a></h2><p>性能优化:</p><ul><li>标准的 HTTP/REST 协议虽然使用广泛,但由于其报文头部开销较大,不适合高性能的 RPC 场景。</li><li>自定义的二进制协议,如 Protobuf、Thrift 等,可以大幅降低数据传输的开销,提升 RPC 的吞吐量和延迟。</li></ul><h2 id="自定义rpc协议设计" tabindex="-1"><a class="header-anchor" href="#自定义rpc协议设计"><span>自定义RPC协议设计</span></a></h2><p>自定义RPC协议两大核心部分：</p><ul><li>自定义网络传输</li><li>自定义消息结构</li></ul><h3 id="网络传输设计" tabindex="-1"><a class="header-anchor" href="#网络传输设计"><span>网络传输设计</span></a></h3><p>由于HTTP本身是应用层协议，我们现在要设计的RPC协议也是 应用层协议，性能不如底层（TCP与UDP）传输效率高 ，因此对于高性能的追求，我们选择使用TCP协议进行网络传输。</p><h3 id="消息结构设计" tabindex="-1"><a class="header-anchor" href="#消息结构设计"><span>消息结构设计</span></a></h3><p>我们设计消息结构的目的是为了用最少的空间来传输需要的信息。</p><blockquote><p>int占4个字节、32个比特（bit）位、而byte占1个字节（8个bit位），尽量要选择使用byte。</p><p>但是Java中bit运算麻烦，因此要尽量凑到整个字节</p></blockquote><p>消息结构设计，我们的RPC消息所需要的信息：</p><ul><li>魔数：标识当前消息是 RPC 协议的消息，避免与其他协议的消息混淆,提高消息的可靠性。</li><li>版本号：用于标识当前 RPC 协议的版本,以便于后续的协议升级和兼容性管理。</li><li>序列化方式：标识消息体采用的序列化方式,如 Protobuf、Hessian 等,便于接收方进行正确的反序列化。</li><li>类型：标识当前消息的类型,如请求、响应、通知</li><li>状态：标识当前消息的状态,如成功、失败等</li><li>请求ID：标识当前消息的唯一标识符,便于接收方与对应的请求进行关联。</li><li>消息体长度：标识消息体的长度,便于接收方准确获取完整的消息内容（TCP有半包和粘包问题，传输信息不完整）</li><li>消息体内容：携带实际的业务数据,如方法名、参数列表、返回值等。</li></ul><p>结构如下：</p><p><img src="'+n+`" alt="message.svg"></p><p>请求头的大小$=1+1+1+1+1+8+4=17字节$，我们将整个结构拼接在一起成紧凑的数据。</p><p>在后续实现消息编码器和消息解码器的时候：</p><ul><li>首先编码器按照顺序向缓冲区Buffer写入这些数据</li><li>解码器在按照这个顺序依次读取，比如读magic，只需要读第一个 字节(8bit)即可。</li></ul><p>使用这种方式，我们就不用使用<code>key=value</code>的格式 ，这样可以更省内存 。</p><blockquote><p>Redis中很多数据结构都是这样设计的如：<a href="!%5B%5D(https://s2.loli.net/2024/05/03/RHjy2L6EcwMYVg5.webp)">参考链接</a></p><p><img src="https://s2.loli.net/2024/05/03/RHjy2L6EcwMYVg5.webp" alt="image-20240503153829665"></p><p>Dubbo协议设计：</p><p><img src="https://cn.dubbo.apache.org/imgs/dev/dubbo_protocol_header.png" alt="/dev-guide/images/dubbo_protocol_header.jpg"></p></blockquote><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><h3 id="消息结构代码" tabindex="-1"><a class="header-anchor" href="#消息结构代码"><span>消息结构代码</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yunfei<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>protocol</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 协议消息结构
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 消息头
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Header</span> header<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 消息体 （请求或响应对象）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> body<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 协议消息头
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 魔数
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> magic<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 协议版本
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> version<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 序列化器
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> serializer<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 消息类型 - 请求/响应
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> type<span class="token punctuation">;</span>


        <span class="token doc-comment comment">/**
         * 状态
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">byte</span> status<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 请求 ID
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">long</span> requestId<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 消息体长度
         */</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> bodyLength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息编码" tabindex="-1"><a class="header-anchor" href="#消息编码"><span>消息编码</span></a></h3><p>Vert.x的TCP服务器收发消息都是Buffer类型，不可以直接写入Java对象，我们需要实现一个编码器和解码器，使得Java对象和Buffer之间可以相互转换</p><p><img src="`+s+`" alt="encode.svg"></p><h4 id="消息编码-1" tabindex="-1"><a class="header-anchor" href="#消息编码-1"><span>消息编码</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtocolMessageEncoder</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 编码
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Buffer</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> protocolMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>protocolMessage <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> protocolMessage<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> protocolMessage<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 依次向缓冲区写入字节</span>
        <span class="token class-name">Buffer</span> buffer <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendByte</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendLong</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取序列化器</span>
        <span class="token class-name">ProtocolMessageSerializerEnum</span> serializerEnum <span class="token operator">=</span> <span class="token class-name">ProtocolMessageSerializerEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serializerEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的序列化器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyBytes <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>protocolMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入 body 长度 和 数据</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendInt</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        buffer<span class="token punctuation">.</span><span class="token function">appendBytes</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><p>获取 <code>protocolMessage</code> 的 <code>header</code> 属性,并将其各个字段写入到一个新创建的 <code>Buffer</code> 对象中。这些字段包括:</p><ul><li><code>magic</code>: 消息头的&quot;魔数&quot;,用于标识消息协议。byte类型，1个字节</li><li><code>version</code>: 消息协议的版本号。byte类型，1个字节</li><li><code>serializer</code>: 消息体的序列化方式。byte类型，1个字节</li><li><code>type</code>: 消息的类型,如请求、响应等。byte类型，1个字节</li><li><code>status</code>: 消息的状态,如成功、失败等。byte类型，1个字节</li><li><code>requestId</code>: 消息的请求 ID。long类型，8个字节</li></ul><p>然后根据 <code>header</code> 中的 <code>serializer</code> 字段,获取对应的序列化器实现。使用序列化器将 <code>protocolMessage</code> 的 <code>body</code> 属性序列化为字节数组。</p><ul><li><code>bodyLength</code>:将字节数组的长度写入 <code>Buffer</code> 对象。int类型，4个字节</li><li><code>body</code>:然后将字节数组本身也写入 <code>Buffer</code> 对象。未知</li></ul><p><img src="`+a+`" alt="encode1.svg"></p><h4 id="消息解码" tabindex="-1"><a class="header-anchor" href="#消息解码"><span>消息解码</span></a></h4><p>在消息解码的时候，我们就可以参考上面的图了，依次从中读取对应的数据，同时为了解决粘包的问题，我们读取的body的大小应该是bodyLength的值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 协议消息解码器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtocolMessageDecoder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Buffer</span> buffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 分别从指定位置读出Buffer</span>
        <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> magic <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getByte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 校验魔数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>magic <span class="token operator">!=</span> <span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">PROTOCOL_MAGIC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid magic!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        header<span class="token punctuation">.</span><span class="token function">setMagic</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getByte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setSerializer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getByte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getByte</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getByte</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setRequestId</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        header<span class="token punctuation">.</span><span class="token function">setBodyLength</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 解决粘包问题，只读取指定长度的数据</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyBytes <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token operator">+</span> header<span class="token punctuation">.</span><span class="token function">getBodyLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解析消息体</span>
        <span class="token class-name">ProtocolMessageSerializerEnum</span> serializerEnum <span class="token operator">=</span> <span class="token class-name">ProtocolMessageSerializerEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serializerEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;序列化消息的协议不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>serializerEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProtocolMessageTypeEnum</span> messageTypeEnum <span class="token operator">=</span> <span class="token class-name">ProtocolMessageTypeEnum</span><span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageTypeEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;序列化消息的类型不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>messageTypeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">REQUEST</span><span class="token operator">:</span>
                <span class="token class-name">RpcRequest</span> request <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">,</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">RESPONSE</span><span class="token operator">:</span>
                <span class="token class-name">RpcResponse</span> response <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">,</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">HEAT_BEAT</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token constant">OTHER</span><span class="token operator">:</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的消息类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcp服务器实现" tabindex="-1"><a class="header-anchor" href="#tcp服务器实现"><span>TCP服务器实现</span></a></h3><p>我们使用Vert.x创建一个TCP服务</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * TCP服务器实现
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VertxTcpServer</span> <span class="token keyword">implements</span> <span class="token class-name">HttpServer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStart</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个Vertx实例</span>
        <span class="token class-name">Vertx</span> vertx <span class="token operator">=</span> <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建一个TCP服务器</span>
        <span class="token class-name">NetServer</span> server <span class="token operator">=</span> vertx<span class="token punctuation">.</span><span class="token function">createNetServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 处理连接请求</span>
        server<span class="token punctuation">.</span><span class="token function">connectHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TcpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动TCP服务器并监听指定端口</span>
        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TCP server is now listening on actual port: &quot;</span> <span class="token operator">+</span> server<span class="token punctuation">.</span><span class="token function">actualPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to bind!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">VertxTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doStart</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中处理连接请求在后面<code> server.connectHandler(new TcpServerHandler());</code>,主要涉及半包、粘包等问题的处理</p><h3 id="tcp客户端实现" tabindex="-1"><a class="header-anchor" href="#tcp客户端实现"><span>TCP客户端实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VertxTcpClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RpcResponse</span> <span class="token function">doRequest</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> rpcRequest<span class="token punctuation">,</span> <span class="token class-name">ServiceMetaInfo</span> metaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送TCP请求</span>
        <span class="token class-name">Vertx</span> vertx <span class="token operator">=</span> <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NetClient</span> netClient <span class="token operator">=</span> vertx<span class="token punctuation">.</span><span class="token function">createNetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> responseFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        netClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect to TCP server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Connected to TCP server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">NetSocket</span> socket <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 发送数据</span>
            <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> protocolMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            header<span class="token punctuation">.</span><span class="token function">setMagic</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">PROTOCOL_MAGIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">PROTOCOL_VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">setSerializer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageSerializerEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">REQUEST</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">setRequestId</span><span class="token punctuation">(</span><span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            protocolMessage<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
            protocolMessage<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 编码请求</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Buffer</span> encodeBuffer <span class="token operator">=</span> <span class="token class-name">ProtocolMessageEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>protocolMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encodeBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 接收响应</span>
            <span class="token class-name">TcpBufferHandlerWrapper</span> tcpBufferHandlerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> responseProtocolMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    responseFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>responseProtocolMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;协议消息码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>tcpBufferHandlerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting for response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        rpcResponse <span class="token operator">=</span> responseFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        netClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> rpcResponse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Vertx</span> vertx <span class="token operator">=</span> <span class="token class-name">Vertx</span><span class="token punctuation">.</span><span class="token function">vertx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vertx<span class="token punctuation">.</span><span class="token function">createNetClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">8082</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">succeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Connected to Tcp Server!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">NetSocket</span> socket <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Buffer</span> buffer <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello,server!hello,server!hello,server!hello,server!&quot;</span><span class="token punctuation">;</span>
                    buffer<span class="token punctuation">.</span><span class="token function">appendInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    buffer<span class="token punctuation">.</span><span class="token function">appendInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Send data to server:&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    buffer<span class="token punctuation">.</span><span class="token function">appendBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 接收数据</span>
                socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received data from server:&quot;</span> <span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to connect: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">VertxTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求处理器-服务提供者" tabindex="-1"><a class="header-anchor" href="#请求处理器-服务提供者"><span>请求处理器（服务提供者）</span></a></h3><p>请求处理器的主要作用是接受请求，通过反射调用对应的服务实现类</p><p>我们通过Vert.x提供的<code>Handler&lt;NetSocket&gt;</code>接口，来实现TCP请求处理器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpServerHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NetSocket</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 处理请求
     *
     * <span class="token keyword">@param</span> <span class="token parameter">socket</span> the event to handle
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">NetSocket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TcpBufferHandlerWrapper</span> bufferHandlerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 接受请求，解码</span>
            <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcRequest</span><span class="token punctuation">&gt;</span></span> protocolMessage<span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                protocolMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcRequest</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;协议消息解码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> protocolMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ProtocolMessage<span class="token punctuation">.</span>Header</span> header <span class="token operator">=</span> protocolMessage<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理请求</span>
            <span class="token comment">// 构造响应结果对象</span>
            <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取要调用的服务实现类，通过反射调用</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> implClass <span class="token operator">=</span> <span class="token class-name">LocalRegistry</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> method <span class="token operator">=</span> implClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>implClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 封装返回结果</span>
                rpcResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                rpcResponse<span class="token punctuation">.</span><span class="token function">setDataType</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                rpcResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                rpcResponse<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                rpcResponse<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 发送响应，编码</span>
            header<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageTypeEnum</span><span class="token punctuation">.</span><span class="token constant">RESPONSE</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            header<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">ProtocolMessageStatusEnum</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> responseProtocolMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> rpcResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Buffer</span> encode <span class="token operator">=</span> <span class="token class-name">ProtocolMessageEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>responseProtocolMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;协议消息编码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>bufferHandlerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的 Vert.x 的 TCP 服务端处理器,主要实现了以下功能:</p><ol><li><p>接收客户端连接请求,并创建 <code>TcpBufferHandlerWrapper</code> 对象处理接收的数据。</p></li><li><p>在 <code>TcpBufferHandlerWrapper</code> 中实现了以下逻辑:</p><ul><li>使用 <code>ProtocolMessageDecoder.decode()</code> 方法解码接收到的数据,得到 <code>ProtocolMessage&lt;RpcRequest&gt;</code> 对象。</li><li>从 <code>ProtocolMessage</code> 中获取 <code>RpcRequest</code> 对象,并根据其中的服务名称和方法名,通过反射调用对应的服务实现类方法,获取执行结果。</li><li>创建 <code>RpcResponse</code> 对象,将执行结果封装其中,并设置响应状态为成功。如果在调用过程中出现异常,则将异常信息设置到 <code>RpcResponse</code> 中。</li><li>使用 <code>ProtocolMessageEncoder.encode()</code> 方法将 <code>ProtocolMessage&lt;RpcResponse&gt;</code> 对象编码为字节序列,并通过 <code>socket.write()</code> 方法写回给客户端。</li></ul></li></ol><h3 id="请求发送-服务消费者" tabindex="-1"><a class="header-anchor" href="#请求发送-服务消费者"><span>请求发送（服务消费者）</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 动态代理
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">// 指定序列化器</span>
    <span class="token keyword">final</span> <span class="token class-name">Serializer</span> serializer <span class="token operator">=</span> <span class="token class-name">SerializerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>

        <span class="token comment">// 构造请求</span>
        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serviceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameterTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 从注册中心获取服务提供者请求地址</span>
        <span class="token class-name">RpcConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构造请求</span>
        <span class="token class-name">String</span> serviceName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceVersion</span><span class="token punctuation">(</span><span class="token class-name">RpcConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_SERVICE_VERSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfos <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">serviceDiscovery</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>serviceMetaInfos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;暂无可用服务提供者&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 负载均衡</span>
        <span class="token class-name">LoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token class-name">LoadBalancerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;methodName&quot;</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServiceMetaInfo</span> metaInfo <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>requestParams<span class="token punctuation">,</span> serviceMetaInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 发送TCP请求</span>
        <span class="token comment">// 使用重试策略</span>
        <span class="token class-name">RpcResponse</span> response <span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">RetryStrategy</span> retryStrategy <span class="token operator">=</span> <span class="token class-name">RetryStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getRetryStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response <span class="token operator">=</span> retryStrategy<span class="token punctuation">.</span><span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">VertxTcpClient</span><span class="token punctuation">.</span><span class="token function">doRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TolerantStrategy</span> strategy <span class="token operator">=</span> <span class="token class-name">TolerantStrategyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getTolerantStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 构造上下文</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">SERVICE_LIST</span><span class="token punctuation">,</span> serviceMetaInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">CURRENT_SERVICE</span><span class="token punctuation">,</span> metaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">TolerantStrategyConstant</span><span class="token punctuation">.</span><span class="token constant">RPC_REQUEST</span><span class="token punctuation">,</span> rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            response <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">doTolerant</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>VertxTcpClient.doRequest(rpcRequest, metaInfo);</code>在上面已经有了</p><p>Vert.x提供的请求处理器是异步的，反应式的，为了更方便的获取结果，我们使用CompletableFuture将异步转为同步，阻塞代码<code>responseFuture.get()</code>，直到拿到了结果才会继续往下执行</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> responseFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
netClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收响应</span>
    <span class="token class-name">TcpBufferHandlerWrapper</span> tcpBufferHandlerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//返回处理结果</span>
            responseFuture<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>responseProtocolMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>tcpBufferHandlerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
rpcResponse <span class="token operator">=</span> responseFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="半包粘包" tabindex="-1"><a class="header-anchor" href="#半包粘包"><span>半包粘包</span></a></h2><h3 id="什么是半包粘包" tabindex="-1"><a class="header-anchor" href="#什么是半包粘包"><span>什么是半包粘包？</span></a></h3><p>举例：</p><p>如果我们客户端要发送的消息为<code>hello,cxk!hello,cxk!</code></p><ul><li>半包：收到消息少了，例如<code>hello,cxk!</code></li><li>粘包：收到消息多了，例如<code>hello,cxk!hello,cxk!hello,cxk!</code></li></ul><h3 id="如何解决半包粘包问题" tabindex="-1"><a class="header-anchor" href="#如何解决半包粘包问题"><span>如何解决半包粘包问题？</span></a></h3><h4 id="如何解决半包" tabindex="-1"><a class="header-anchor" href="#如何解决半包"><span>如何解决半包？</span></a></h4><p>我们在消息头中已经设置了请求体的长度，在服务端接收的时候，判断每次消息的长度是否符合我们的预期，如果消息不完整，那么我们就留到下一次再读取</p><h4 id="如何解决粘包问题" tabindex="-1"><a class="header-anchor" href="#如何解决粘包问题"><span>如何解决粘包问题</span></a></h4><p>解决思路类似，我们每次只读取指定长度的数据，超过的长度留到下一次接收消息的时候再读取</p><p>在Vert.x中，我们可以使用内置的<code>RecordParser</code>来解决半包和粘包问题，它可以保证下次读取到特定长度的字符，这是我们解决半包粘包问题的基础。</p><p>具体为：<code>RecordParser.newFixed(len)</code></p><p>我们封装一个<code>TcpBufferHandlerWrapper</code>类,这里我们使用了设计模式中的<strong>装饰者模式</strong>,使用<code>RecordParser</code>来对原来的Buffer处理器功能进行增强</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpBufferHandlerWrapper</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Buffer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RecordParser</span> recordParser<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Buffer</span><span class="token punctuation">&gt;</span></span> bufferHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>recordParser <span class="token operator">=</span> <span class="token function">initRecordParser</span><span class="token punctuation">(</span>bufferHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Buffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        recordParser<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">RecordParser</span> <span class="token function">initRecordParser</span><span class="token punctuation">(</span><span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Buffer</span><span class="token punctuation">&gt;</span></span> bufferHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 构造parser</span>
        <span class="token class-name">RecordParser</span> parser <span class="token operator">=</span> <span class="token class-name">RecordParser</span><span class="token punctuation">.</span><span class="token function">newFixed</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_HEADER_LENGTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parser<span class="token punctuation">.</span><span class="token function">setOutput</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Buffer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 初始化</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">Buffer</span> resultBuffer <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Buffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 读取消息体的长度</span>
                    size <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    parser<span class="token punctuation">.</span><span class="token function">fixedSizeMode</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 写入头信息到结果</span>
                    resultBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 写入体信息到结果</span>
                    resultBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 已拼接为完整的Buffer，执行处理</span>
                    bufferHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>resultBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 重置parser</span>
                    parser<span class="token punctuation">.</span><span class="token function">fixedSizeMode</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_HEADER_LENGTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                    resultBuffer <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> parser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TcpBufferHandlerWrapper</code> 类是一个 Vert.x 的 <code>Handler&lt;Buffer&gt;</code> 实现,用于处理从 TCP 连接中接收到的二进制数据。它的主要功能如下:</p><ol><li><p>在构造函数中初始化一个 <code>RecordParser</code> 对象,用于解析接收到的数据。</p></li><li><p>实现 <code>handle(Buffer buffer)</code> 方法,将接收到的二进制数据传递给 <code>RecordParser</code> 进行处理。</p></li><li><p><code>initRecordParser()</code> 方法中实现了 <code>RecordParser</code> 的初始化逻辑:</p><ul><li>创建一个新的 <code>RecordParser</code> 实例,并设置其固定长度为 <code>ProtocolConstant.MESSAGE_HEADER_LENGTH</code>(消息头长度)。</li><li>设置 <code>RecordParser</code> 的输出处理器,该处理器内部实现了以下逻辑: <ul><li>首先读取消息体的长度,并设置 <code>RecordParser</code> 的固定长度模式为该长度。</li><li>将消息头部分数据写入临时缓冲区 <code>resultBuffer</code>。</li><li>当接收到完整的消息体数据后,将整个消息写入 <code>resultBuffer</code>,并将其传递给外部处理器进行处理。</li><li>重置 <code>RecordParser</code> 的固定长度模式为消息头长度,并清空 <code>resultBuffer</code>。</li></ul></li></ul></li></ol><p>这个 <code>TcpBufferHandlerWrapper</code> 类的作用是将从 TCP 连接中接收到的二进制数据流,按照消息协议的格式进行解析,并将解析后的完整消息传递给外部处理器进行处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 读取消息体的长度</span>
                size <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parser<span class="token punctuation">.</span><span class="token function">fixedSizeMode</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 写入头信息到结果</span>
                resultBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 写入体信息到结果</span>
                resultBuffer<span class="token punctuation">.</span><span class="token function">appendBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 已拼接为完整的Buffer，执行处理</span>
                bufferHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>resultBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 重置parser</span>
                parser<span class="token punctuation">.</span><span class="token function">fixedSizeMode</span><span class="token punctuation">(</span><span class="token class-name">ProtocolConstant</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_HEADER_LENGTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                resultBuffer <span class="token operator">=</span> <span class="token class-name">Buffer</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，如果<code>size==-1</code>,那么我们就读取从位置<code>13</code>开始的数据，读一个int，这个数据就是消息体的长度。</p><p>等到下次<code>size</code>不等于-1了，因为我们设置了<code>parser.fixedSizeMode(size);</code>就是保证可以读取size 长度，也就是下次一定可以读取到整个消息体内容，读完了之后再重置一下。</p><p><code>MESSAGE_HEADER_LENGTH=17</code>,在初始化设置为这样就是为了读取整个消息头的内容，然后可以获取消息体的长度。</p><p>因为我们在消息结构是这样设计的：<a href="###%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81">消息结构代码</a></p><p>具体使用：</p><p>在<code>TcpServerHandler</code>进行增强</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpServerHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NetSocket</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">NetSocket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TcpBufferHandlerWrapper</span> bufferHandlerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
        socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>bufferHandlerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>VertxTcpClient</code>进行增强</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VertxTcpClient</span> <span class="token punctuation">{</span>
    netClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>metaInfo<span class="token punctuation">.</span><span class="token function">getServicePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaInfo<span class="token punctuation">.</span><span class="token function">getServiceHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接收响应</span>
        <span class="token class-name">TcpBufferHandlerWrapper</span> tcpBufferHandlerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpBufferHandlerWrapper</span><span class="token punctuation">(</span>buffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>tcpBufferHandlerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),u=[l];function i(k,r){return p(),e("div",null,u)}const b=t(o,[["render",i],["__file","自定义协议(重点).html.vue"]]),f=JSON.parse('{"path":"/docs/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE(%E9%87%8D%E7%82%B9).html","title":"自定义协议(重点)","lang":"en-US","frontmatter":{"date":"2024-05-03T00:00:00.000Z","title":"自定义协议(重点)","order":7,"description":"自定义协议(重点) 一些协议概念 RPC(Remote Procedure Call Protocol)远程过程调用协议。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。 HTTP（超文本传输协议，Hypertext Transfer Protocol是一种用于从网络传输超文本到本地...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE(%E9%87%8D%E7%82%B9).html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"自定义协议(重点)"}],["meta",{"property":"og:description","content":"自定义协议(重点) 一些协议概念 RPC(Remote Procedure Call Protocol)远程过程调用协议。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。 HTTP（超文本传输协议，Hypertext Transfer Protocol是一种用于从网络传输超文本到本地..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/05/03/RHjy2L6EcwMYVg5.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T13:03:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T13:03:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义协议(重点)\\",\\"image\\":[\\"https://s2.loli.net/2024/05/03/RHjy2L6EcwMYVg5.webp\\",\\"https://s2.loli.net/2024/05/03/RHjy2L6EcwMYVg5.webp\\",\\"https://cn.dubbo.apache.org/imgs/dev/dubbo_protocol_header.png\\"],\\"datePublished\\":\\"2024-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T13:03:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"一些协议概念","slug":"一些协议概念","link":"#一些协议概念","children":[]},{"level":2,"title":"为什么要自定义RPC协议","slug":"为什么要自定义rpc协议","link":"#为什么要自定义rpc协议","children":[]},{"level":2,"title":"自定义RPC协议设计","slug":"自定义rpc协议设计","link":"#自定义rpc协议设计","children":[{"level":3,"title":"网络传输设计","slug":"网络传输设计","link":"#网络传输设计","children":[]},{"level":3,"title":"消息结构设计","slug":"消息结构设计","link":"#消息结构设计","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"消息结构代码","slug":"消息结构代码","link":"#消息结构代码","children":[]},{"level":3,"title":"消息编码","slug":"消息编码","link":"#消息编码","children":[]},{"level":3,"title":"TCP服务器实现","slug":"tcp服务器实现","link":"#tcp服务器实现","children":[]},{"level":3,"title":"TCP客户端实现","slug":"tcp客户端实现","link":"#tcp客户端实现","children":[]},{"level":3,"title":"请求处理器（服务提供者）","slug":"请求处理器-服务提供者","link":"#请求处理器-服务提供者","children":[]},{"level":3,"title":"请求发送（服务消费者）","slug":"请求发送-服务消费者","link":"#请求发送-服务消费者","children":[]}]},{"level":2,"title":"半包粘包","slug":"半包粘包","link":"#半包粘包","children":[{"level":3,"title":"什么是半包粘包？","slug":"什么是半包粘包","link":"#什么是半包粘包","children":[]},{"level":3,"title":"如何解决半包粘包问题？","slug":"如何解决半包粘包问题","link":"#如何解决半包粘包问题","children":[]}]}],"git":{"createdTime":1714788095000,"updatedTime":1714827784000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":13.21,"words":3962},"filePathRelative":"docs/自定义协议(重点).md","localizedDate":"May 3, 2024","excerpt":"\\n<h2>一些协议概念</h2>\\n<ul>\\n<li>\\n<p><strong>RPC(Remote Procedure Call Protocol)远程过程调用协议</strong>。一个通俗的描述是：客户端在不知道调用细节的情况下，调用存在于远程计算机上的某个对象，就像调用本地应用程序中的对象一样。</p>\\n</li>\\n<li>\\n<p><strong>HTTP（超文本传输协议，Hypertext Transfer Protocol</strong>是一种用于从网络传输超文本到本地浏览器的传输协议。它定义了客户端与服务器之间请求和响应的格式。HTTP 工作在 TCP/IP 模型之上，通常使用端口 <strong>80</strong>。</p>\\n</li>\\n<li>\\n<p><strong>传输控制协议（TCP，Transmission Control Protocol</strong>是一种面向连接的、可靠的、基于字节流的传输层通信协议，</p>\\n</li>\\n<li>\\n<p><strong>UDP(User Datagram Protocol)即用户数据报协议</strong>，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。</p>\\n</li>\\n</ul>","autoDesc":true}');export{b as comp,f as data};
