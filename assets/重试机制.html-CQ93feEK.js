import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,b as c,d as l,e as s}from"./app-BVuvStlx.js";const i={},u=s('<h1 id="重试机制实现" tabindex="-1"><a class="header-anchor" href="#重试机制实现"><span>重试机制实现</span></a></h1><h2 id="什么是重试机制" tabindex="-1"><a class="header-anchor" href="#什么是重试机制"><span>什么是重试机制？</span></a></h2><p>重试机制：就是当调用端发起的请求失败时，RPC框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试次数。</p><p>调用端在发起 RPC 调用时，会经过负载均衡，选择一个节点，之后它会向这个节点发送请求信息。当消息发送失败或收到异常消息时，我们就可以捕获异常，根据异常触发重试，重新通过负载均衡选择一个节点发送请求消息，并且记录请求的重试次数，当重试次数达到用户配置的重试次数的时候，就返回给调用端动态代理一个失败异常，否则就一直重试下去。</p><h2 id="为什么要重试机制" tabindex="-1"><a class="header-anchor" href="#为什么要重试机制"><span>为什么要重试机制？</span></a></h2><p>重试机制的主要原因有以下几点:</p><ol><li><p>提高接口的可用性和可靠性:当远程服务调用失败时,比如网络抖动导致请求失败,重试机制可以让系统自动重新发起请求,尽量保证接口能够成功执行。</p></li><li><p>处理临时性的错误:一些临时性的错误,比如网络超时、连接异常等,可能会导致单次请求失败。重试机制可以自动处理这类临时性错误,提高成功率。</p></li><li><p>降低调用端的复杂度:如果没有重试机制,调用端需要自行捕获异常,并手动重试,这会增加调用端代码的复杂度。重试机制可以将这部分逻辑封装在RPC框架内部,降低调用端的开发难度。</p></li><li><p>实现幂等性:试机制要求被调用的服务具有幂等性,即多次执行同一个操作,不会产生副作用。这可以进一步提高系统的稳定性和可靠性。</p></li></ol><p>重试机制是提高分布式系统可用性和容错性的一种有效手段,能够提高系统的整体可靠性。</p>',8),r={href:"https://blog.csdn.net/zhizhengguan/article/details/121451100",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"RPC框架的重试机制：当调用端发起的请求失败时，如果配置了异常重试机制，RPC框架会捕捉异常，对异常进行判定，符合条件的进行重试。",-1),d=n("p",null,"在重试的过程中，为了能够在约定的时间内进行安全可靠的重试，在每次触发重试之前，我们需要先判定下这个请求是否已经超时，如果超时了会直接返回超时异常，否则我们需要重置下这个请求的超时时间，防止因为多次重试而导致这个请求的处理时间超过用户配置的超时时间，从而影响到业务处理的耗时。",-1),m=n("p",null,"在发起重试、负载均衡选择节点的时候，我们应该去掉重试之前出现过问题的那个节点，这样可以提高重试的成功率，并且允许用户配置可重试异常的白名单，这样可以让RPC框架的异常重试功能变得更加友好。",-1),v=n("p",null,"另外，在使用RPC框架的重试机制时，我们要确保被调用的服务的业务逻辑是幂等的，这样才能考虑是否使用重试",-1),b=s(`<h2 id="重试机制有哪些" tabindex="-1"><a class="header-anchor" href="#重试机制有哪些"><span>重试机制有哪些？</span></a></h2><p>在 RPC 系统中,常见的重试策略主要包括以下几种:</p><ol><li><p><strong>固定间隔重试策略（Fixed Interval Retry）</strong>:</p><ul><li>每次重试之间固定一个时间间隔,例如 3 秒。</li><li>适用于对响应时间要求不太严格的场景。</li></ul></li><li><p><strong>指数退避重试策略（Exponential Backoff Retry）</strong>:</p><ul><li>每次重试的时间间隔呈指数增长,例如 1 秒、2 秒、4 秒、8 秒等。</li><li>适用于网络波动较大的场景,避免短时间内发送大量重复请求。</li></ul></li><li><p><strong>线性重试策略（Linear Retry）</strong>:</p><ul><li>每次重试之间的时间间隔是线性增加的,例如 1 秒、2 秒、3 秒等。</li><li>介于固定间隔和指数退避之间,适用于一般的网络环境。</li></ul></li><li><p><strong>随机重试策略（Random Retry）</strong>:</p><ul><li>每次重试的时间间隔是随机的,在一定范围内波动。</li><li>适用于避免重试请求同步的场景,例如防止雪崩效应。</li></ul></li><li><p><strong>断路器重试策略（Circuit Breaker Retry）</strong>:</p><ul><li>结合断路器模式,当服务出现多次失败时,暂时断开对该服务的调用。</li><li>当服务恢复正常后,再逐步恢复对该服务的调用。</li><li>适用于依赖服务不稳定的场景,可以有效防止级联故障。</li></ul></li><li><p><strong>重试次数限制策略（Retry Limit）</strong>:</p><ul><li>设置最大重试次数,超过限制则放弃重试。</li><li>与其他重试策略配合使用,防止无限重试耗尽资源。</li></ul></li><li><p><strong>不重试(No Retry)</strong></p><ul><li>当远程调用失败时,直接返回失败结果,不进行任何重试。</li><li>这种方式适用于对响应时间要求较高的场景,或者对于一些幂等性较强的操作。</li></ul></li></ol><p>这些重试策略各有适用场景,在实际的 RPC 系统设计中,通常会根据业务特点和性能需求,选择合适的重试策略或者组合使用多种策略。</p><p>例如,在一个对响应时间要求较高的 RPC 系统中,可以采用指数退避重试策略,并设置重试次数限制,以兼顾服务的可靠性和性能。而在一个对可用性要求更高的系统中,则可以考虑使用断路器重试策略。</p><h2 id="重试策略实现" tabindex="-1"><a class="header-anchor" href="#重试策略实现"><span>重试策略实现</span></a></h2><p>我们需要搞清楚几个问题：</p><ol><li>什么时候，什么条件重试</li><li>重试时间，下一次重试时间</li><li>什么时候，什么条件停止重试</li><li>重试之后要做什么？</li></ol><h3 id="重试策略接口定义" tabindex="-1"><a class="header-anchor" href="#重试策略接口定义"><span>重试策略接口定义</span></a></h3><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 重试策略接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetryStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 重试
     * <span class="token keyword">@param</span> <span class="token parameter">callable</span> 重试的方法 代表一个任务
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token class-name">RpcResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><p><code>RetryStrategy</code> 接口定义了重试策略的标准,包括以下方法:<code>doRetry(Callable&lt;RpcResponse&gt; callable)</code>:</p><ul><li>该方法接受一个 <code>Callable</code> 对象作为参数,表示需要重试的方法调用。</li><li>方法实现需要根据具体的重试策略,决定是否需要重试,并执行重试操作。</li><li>如果重试成功,则返回调用结果 <code>RpcResponse</code>。如果重试失败,则抛出异常。</li></ul><p>引入Google的Guava-Retrying库</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--        重试策略--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.rholder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava-retrying<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不重试策略" tabindex="-1"><a class="header-anchor" href="#不重试策略"><span>不重试策略</span></a></h3><p>实现最简单，我们直接返回即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoRetryStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RetryStrategy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 重试
     *
     * <span class="token keyword">@param</span> <span class="token parameter">callable</span> 重试的方法 代表一个任务
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="固定重试间隔策略" tabindex="-1"><a class="header-anchor" href="#固定重试间隔策略"><span>固定重试间隔策略</span></a></h3><p>我们使用了 <code>google-guava</code> 提供的 <code>Retryer</code> 工具来实现重试逻辑。具体实现如下:</p><ol><li><code>doRetry()</code> 方法是 <code>RetryStrategy</code> 接口的实现,它接收一个 <code>Callable</code> 作为需要重试的任务。</li><li>在方法中,首先创建了一个 <code>Retryer</code> 对象,并配置了以下重试策略: <ul><li><code>retryIfExceptionOfType(Exception.class)</code>: 遇到任何异常类型都进行重试。</li><li><code>withWaitStrategy(WaitStrategies.fixedWait(3L, TimeUnit.SECONDS))</code>: 每次重试之间固定间隔 3 秒。</li><li><code>withStopStrategy(StopStrategies.stopAfterAttempt(3))</code>: 最多重试 3 次,超过则停止重试。</li><li><code>withRetryListener(new RetryListener() { ... })</code>: 添加了一个重试监听器,在每次重试时打印当前重试次数。</li></ul></li><li>最后调用 <code>retryer.call(callable)</code> 执行重试操作,并返回最终的调用结果 <code>RpcResponse</code>。</li></ol><p>这个重试策略的特点如下:</p><ol><li><p><strong>固定时间间隔</strong>:<br> 每次重试之间都有 3 秒的固定时间间隔,这种策略适用于对响应时间要求不太严格的场景。</p></li><li><p><strong>有限重试次数</strong>:<br> 最多重试 3 次,超过则停止重试。这可以避免无限重试导致资源耗尽的问题。</p></li><li><p><strong>异常捕获</strong>:<br> 对任何异常类型都进行捕获并重试,适用于比较通用的重试场景。</p><ol><li><strong>重试监听</strong>:<br> 添加了重试监听器,可以在每次重试时打印日志,方便问题排查。</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 固定时间间隔重试策略
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixedIntervalRetryStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RetryStrategy</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 重试
     * <span class="token keyword">@param</span> <span class="token parameter">callable</span> 重试的方法 代表一个任务
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Retryer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> retryer <span class="token operator">=</span> <span class="token class-name">RetryerBuilder</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">retryIfExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withWaitStrategy</span><span class="token punctuation">(</span><span class="token class-name">WaitStrategies</span><span class="token punctuation">.</span><span class="token function">fixedWait</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withStopStrategy</span><span class="token punctuation">(</span><span class="token class-name">StopStrategies</span><span class="token punctuation">.</span><span class="token function">stopAfterAttempt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withRetryListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RetryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">onRetry</span><span class="token punctuation">(</span><span class="token class-name">Attempt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> attempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;重试第{}次&quot;</span><span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">getAttemptNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> retryer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指数退避重试策略" tabindex="-1"><a class="header-anchor" href="#指数退避重试策略"><span>指数退避重试策略</span></a></h3><p>我们可以实现一个指数退避重试策略。主要步骤如下:</p><ol><li>定义最大重试次数 <code>MAX_RETRY_TIMES</code> 为 5 次。</li><li>在 <code>doRetry()</code> 方法中,使用 <code>Stopwatch</code> 来记录每次重试的耗时。</li><li>在每次重试时,先调用 <code>callable.call()</code> 执行远程调用。</li><li>如果出现异常,则进行重试处理: <ul><li>记录当前重试次数 <code>retryTimes</code>。</li><li>计算本次重试的退避时间 <code>sleepTime</code>。初始退避时间为 100 毫秒,每次重试时退避时间翻倍。</li><li>如果 <code>sleepTime</code> 大于 0,则通过 <code>Thread.sleep()</code> 进行退避延迟。</li><li>如果重试次数达到上限,则抛出异常。</li></ul></li><li>如果重试成功,则直接返回结果 <code>RpcResponse</code>。</li></ol><p>这种指数退避重试策略可以有效应对网络抖动和服务短暂不可用的情况。它会逐步增加重试间隔,避免在短时间内大量重复请求,从而降低系统负载。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Stopwatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExponentialBackoffRetryStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RetryStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RETRY_TIMES</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">INITIAL_BACKOFF_INTERVAL</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 初始退避时间100毫秒</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> backoffInterval <span class="token operator">=</span> <span class="token constant">INITIAL_BACKOFF_INTERVAL</span><span class="token punctuation">;</span>
        <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createUnstarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;</span> <span class="token constant">MAX_RETRY_TIMES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                stopwatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                retryTimes<span class="token operator">++</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;RPC call failed, retrying... Current retry times: {}&quot;</span><span class="token punctuation">,</span> retryTimes<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

                stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> sleepTime <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>backoffInterval<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> backoffInterval <span class="token operator">-</span> elapsedTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stopwatch<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>sleepTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Backing off for {} ms before next retry.&quot;</span><span class="token punctuation">,</span> sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                backoffInterval <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 指数退避</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum retry times exceeded, giving up.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>callable.call()</code> 是 Java 中 <code>Callable</code> 接口的一个方法,用于执行一个可以返回结果的任务。</p><p>在 Java 中, <code>Callable</code> 是一个函数式接口,它包含一个名为 <code>call()</code> 的方法,该方法声明为 <code>throws Exception</code>。这意味着 <code>call()</code> 方法可能会抛出任何类型的异常。</p><p>以下是 <code>Callable</code> 接口的定义:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Computes a result, or throws an exception if unable to do so.
     *
     * <span class="token keyword">@return</span> computed result
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> if unable to compute a result
     */</span>
    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的 <code>ExponentialBackoffRetryStrategy</code> 类中, <code>callable.call()</code> 用于执行需要重试的远程调用任务。具体工作流程如下:</p><ol><li>当 <code>doRetry()</code> 方法被调用时,会传入一个 <code>Callable&lt;RpcResponse&gt;</code> 对象作为参数。这个 <code>Callable</code> 对象代表了需要执行的远程调用任务。</li><li>在 <code>doRetry()</code> 方法内部,我们会调用 <code>callable.call()</code> 来执行这个任务。</li><li>如果 <code>call()</code> 方法执行成功,则直接返回结果 <code>RpcResponse</code>。</li><li>如果 <code>call()</code> 方法抛出异常,则进入重试流程。</li></ol><p>使用 <code>Callable</code> 的好处是:</p><ol><li><strong>返回结果</strong>: <code>Callable</code> 可以返回一个计算结果,而 <code>Runnable</code> 只能执行一个任务,无法返回结果。</li><li><strong>异常处理</strong>: <code>Callable</code> 的 <code>call()</code> 方法可以声明抛出异常,而 <code>Runnable</code> 的 <code>run()</code> 方法不能抛出异常。这使得我们可以更好地处理任务执行过程中的异常情况。</li><li><strong>灵活性</strong>: <code>Callable</code> 是一个函数式接口,可以方便地使用 lambda 表达式或方法引用来创建任务对象。</li></ol></blockquote><h3 id="线性重试策略" tabindex="-1"><a class="header-anchor" href="#线性重试策略"><span>线性重试策略</span></a></h3><p>这个实现与之前的指数退避重试策略非常相似,主要区别在于退避时间的计算方式:</p><ol><li>在每次重试时,我们将退避时间 <code>backoffInterval</code> 线性增加,初始值为 1 秒。</li><li>具体计算方式为 <code>backoffInterval += INITIAL_BACKOFF_INTERVAL</code>。这样每次重试时,退避时间都会增加 1 秒。</li><li>其他部分,如最大重试次数、异常处理、日志记录等,与指数退避重试策略保持一致。</li></ol><p>这种线性重试策略适用于网络环境相对较为稳定的场景,对响应时间要求也不太严格。它能够提供一个平滑的重试过程,不会像指数退避那样导致重试间隔时间过长。</p><p>与指数退避相比,线性重试的优点是:</p><ol><li><strong>响应时间更短</strong>:每次重试的时间间隔增长较缓慢,可以更快地得到服务响应。</li><li><strong>更加稳定</strong>:重试间隔变化平缓,不会出现大幅波动。</li></ol><p>缺点是:</p><ol><li><strong>对网络抖动不太敏感</strong>:当网络环境较差时,线性重试可能无法有效地抑制重试请求。</li></ol><p>如果对响应时间要求较高,且网络环境较为稳定,线性重试策略是一个不错的选择。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Stopwatch</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearRetryStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">RetryStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RETRY_TIMES</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">INITIAL_BACKOFF_INTERVAL</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 初始退避时间1秒</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">doRetry</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RpcResponse</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> backoffInterval <span class="token operator">=</span> <span class="token constant">INITIAL_BACKOFF_INTERVAL</span><span class="token punctuation">;</span>
        <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createUnstarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;</span> <span class="token constant">MAX_RETRY_TIMES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                stopwatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> callable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                retryTimes<span class="token operator">++</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;RPC call failed, retrying... Current retry times: {}&quot;</span><span class="token punctuation">,</span> retryTimes<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

                stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> stopwatch<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> sleepTime <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>backoffInterval<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> backoffInterval <span class="token operator">-</span> elapsedTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stopwatch<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>sleepTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Backing off for {} ms before next retry.&quot;</span><span class="token punctuation">,</span> sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                backoffInterval <span class="token operator">+=</span> <span class="token constant">INITIAL_BACKOFF_INTERVAL</span><span class="token punctuation">;</span> <span class="token comment">// 线性增加退避时间</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Maximum retry times exceeded, giving up.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41);function g(y,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[c("https://blog.csdn.net/zhizhengguan/article/details/121451100"),l(a)])]),k,d,m,v]),b])}const R=e(i,[["render",g],["__file","重试机制.html.vue"]]),x=JSON.parse('{"path":"/docs/%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6.html","title":"重试机制实现","lang":"en-US","frontmatter":{"date":"2024-05-02T00:00:00.000Z","title":"重试机制实现","order":10,"description":"重试机制实现 什么是重试机制？ 重试机制：就是当调用端发起的请求失败时，RPC框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试次数。 调用端在发起 RPC 调用时，会经过负载均衡，选择一个节点，之后它会向这个节点发送请求信息。当消息发送失败或收到异常消息时，我们就可以捕获异常，根据异常触发重试，重新通过负载均衡选择一个节点发送...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"重试机制实现"}],["meta",{"property":"og:description","content":"重试机制实现 什么是重试机制？ 重试机制：就是当调用端发起的请求失败时，RPC框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试次数。 调用端在发起 RPC 调用时，会经过负载均衡，选择一个节点，之后它会向这个节点发送请求信息。当消息发送失败或收到异常消息时，我们就可以捕获异常，根据异常触发重试，重新通过负载均衡选择一个节点发送..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:56:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重试机制实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T09:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"什么是重试机制？","slug":"什么是重试机制","link":"#什么是重试机制","children":[]},{"level":2,"title":"为什么要重试机制？","slug":"为什么要重试机制","link":"#为什么要重试机制","children":[]},{"level":2,"title":"重试机制有哪些？","slug":"重试机制有哪些","link":"#重试机制有哪些","children":[]},{"level":2,"title":"重试策略实现","slug":"重试策略实现","link":"#重试策略实现","children":[{"level":3,"title":"重试策略接口定义","slug":"重试策略接口定义","link":"#重试策略接口定义","children":[]},{"level":3,"title":"不重试策略","slug":"不重试策略","link":"#不重试策略","children":[]},{"level":3,"title":"固定重试间隔策略","slug":"固定重试间隔策略","link":"#固定重试间隔策略","children":[]},{"level":3,"title":"指数退避重试策略","slug":"指数退避重试策略","link":"#指数退避重试策略","children":[]},{"level":3,"title":"线性重试策略","slug":"线性重试策略","link":"#线性重试策略","children":[]}]}],"git":{"createdTime":1714659293000,"updatedTime":1714816564000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":11.22,"words":3366},"filePathRelative":"docs/重试机制.md","localizedDate":"May 2, 2024","excerpt":"\\n<h2>什么是重试机制？</h2>\\n<p>重试机制：就是当调用端发起的请求失败时，RPC框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试次数。</p>\\n<p>调用端在发起 RPC 调用时，会经过负载均衡，选择一个节点，之后它会向这个节点发送请求信息。当消息发送失败或收到异常消息时，我们就可以捕获异常，根据异常触发重试，重新通过负载均衡选择一个节点发送请求消息，并且记录请求的重试次数，当重试次数达到用户配置的重试次数的时候，就返回给调用端动态代理一个失败异常，否则就一直重试下去。</p>","autoDesc":true}');export{R as comp,x as data};
