import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BVuvStlx.js";const e="/yunfei-rpc/assets/loadbalance-DYAF8euy.svg",p="/yunfei-rpc/assets/consistenthashloadbalancer-DzyszgrF.svg",c="/yunfei-rpc/assets/consistenthashloadbalancer2-Bz_5WcjS.svg",o={},l=t('<h1 id="负载均衡器实现" tabindex="-1"><a class="header-anchor" href="#负载均衡器实现"><span>负载均衡器实现</span></a></h1><h2 id="什么是负载均衡" tabindex="-1"><a class="header-anchor" href="#什么是负载均衡"><span>什么是负载均衡？</span></a></h2><p>在 RPC 框架中,负载均衡是一个非常重要的概念。它指的是将请求流量合理地分配到多个服务提供者实例上,以提高系统的可用性和性能。通过负载均衡，将请求分发给这个集群下的每个服务节点，从而达到多个服务节点共同分担请求压力的目的。</p><p>RPC 的负载均衡完全由 RPC 框架自身实现，RPC 的服务调用者会与“注册中心”下发的所有服务节点建立长连接，在每次发起 RPC 调用时，服务调用者都会通过配置的负载均衡插件，自主选择一个服务节点，发起 RPC 调用请求。</p><h2 id="负载均衡类型" tabindex="-1"><a class="header-anchor" href="#负载均衡类型"><span>负载均衡类型</span></a></h2><p>负载均衡可分为软件负载均衡和硬件负载均衡，本篇主要分析软件负载均衡，这是我们后端开发比较经常接触的均衡器，常见的如HAProxy、LVS、Nginx、定制化的应用请求负载（RPC框架如Dubbo）等，诸如CDN、DNS也运用到了负载均衡算法。</p><p>根据 网络层区分负载均衡：</p><ol><li><p>根据网络层协议类型,负载均衡可分为四层负载(TCP/UDP)和七层负载(HTTP/HTTPS)等不同类型。</p></li><li><p>四层负载均衡直接根据传输层信息(IP、端口)进行分发,不处理应用层数据内容,优点是简单高效,缺点是容易受到SYN Flood等攻击。</p></li><li><p>七层负载均衡根据应用层信息(URL、请求头、cookie等)进行更精细的分发,可实现更复杂的负载逻辑,但需要额外的TCP连接层,会略微增加网络性能损耗。</p></li><li><p>尽管七层负载均衡需要更多时间和计算资源,但对现代机器性能而言影响已经很小了。</p></li></ol><blockquote><p>二层负载均衡会通过一个虚拟 MAC 地址接收请求，然后再分配到真实的 MAC 地址；<br> 三层负载均衡会通过一个虚拟 IP 地址接收请求，然后再分配到真实的 IP 地址；<br> 四层通过虚拟 IP + 端口接收请求，然后再分配到真实的服务器；<br> 七层通过虚拟的 URL 或主机名接收请求，然后再分配到真实的服务器。</p></blockquote><p><img src="'+e+`" alt="loadbalance.svg"></p><p>无论是哪层负载均衡，都需要有代理服务器，并且对外提供唯一的 IP 地址，然后根据算法将请求转发到目标服务器（实际处理请求的服务器）</p><h2 id="负载均衡算法实现" tabindex="-1"><a class="header-anchor" href="#负载均衡算法实现"><span>负载均衡算法实现</span></a></h2><p>常见的负载均衡算法主要有以下几种:</p><ol><li><strong>轮询(Round Robin)</strong>:按照请求顺序依次分配到各个服务实例。这是最基础的负载均衡算法。</li><li><strong>加权轮询(Weighted Round Robin)</strong>:根据服务实例的权重进行轮询分配。可以针对不同性能的实例进行加权。</li><li><strong>随机(Random)</strong>:随机选择一个服务实例进行分配。</li><li><strong>最小连接数(Least Connections)</strong>:选择当前连接数最小的服务实例进行分配。这可以平衡各个实例的负载。</li><li><strong>一致性哈希(Consistent Hashing)</strong>:利用一致性哈希算法将请求均匀地分布到不同的服务实例上。可以应对动态扩容缩容场景。</li></ol><h3 id="负载均衡接口定义" tabindex="-1"><a class="header-anchor" href="#负载均衡接口定义"><span>负载均衡接口定义</span></a></h3><p>我们的负载均衡器算法的作用主要就是从注册服务中去选出一个服务来使用，因此定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 负载均衡器 （消费端使用）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 选择服务调用
     * <span class="token keyword">@param</span> <span class="token parameter">requestParams</span> 请求参数
     * <span class="token keyword">@param</span> <span class="token parameter">serviceMetaInfoList</span> 服务列表
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机负载均衡器" tabindex="-1"><a class="header-anchor" href="#随机负载均衡器"><span>随机负载均衡器</span></a></h3><p>实现最简单，每次调用随机函数 ，从列表中随便选一个即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 随机负载均衡器 （消费端使用）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="轮询负载均衡器" tabindex="-1"><a class="header-anchor" href="#轮询负载均衡器"><span>轮询负载均衡器</span></a></h3><p>轮询算法的实现:</p><ul><li>使用 <code>AtomicInteger</code> 类型的 <code>currentIndex</code> 变量记录当前轮询到的索引位置。</li><li>每次调用 <code>select()</code> 方法时,都会使用 <code>getAndIncrement()</code> 方法获取当前索引,并将索引值加 1。</li><li>然后使用取模运算 <code>% size</code> 得到实际的索引位置,从而从列表中选择对应的服务实例返回。</li></ul><p>这里使用JUC包下的AtomicInteger实现原子 计数器，可以防止并发冲突问题</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 轮询负载均衡器 （消费端使用）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundRobinLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 当前索引
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> currentIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 只有一个服务，无需轮询</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 取模轮询</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> currentIndex<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一致性哈希负载均衡器" tabindex="-1"><a class="header-anchor" href="#一致性哈希负载均衡器"><span>一致性哈希负载均衡器</span></a></h3><p>我们现在将空间划分为一个环形结构，每个节点计算哈希值，放入到环上面，每个请求也可以计算哈希值映射到环上一个点，只需要找第一个 大于等于该哈希值的点即可。</p><p>好处在于：如果某个点下线了，那么它会动态计算哈希值，然后分配到其他节点上</p><p>如果对于轮询算法 ，节点数一变，大多数请求都要跟着变</p><p><img src="`+p+'" alt="consistenthashloadbalancer.svg"></p><p>如果说服务器算出的哈希值分布不够均匀，那么我们可以引入虚拟节点，让服务变得均匀。即使只有3个节点也可以分配均匀 ，从而很好的解决了倾斜问题。</p><p><img src="'+c+`" alt="consistenthashloadbalancer2.svg"></p><p>具体实现如下为<code>ConsistentHashLoadBalancer</code> 它的工作原理如下:</p><ol><li><p><strong>虚拟节点环的构建</strong>:</p><ul><li>该负载均衡器使用一个 <code>TreeMap</code> 来存储虚拟节点和对应的服务实例信息。</li><li>在 <code>select()</code> 方法被调用时,会首先遍历服务实例列表 <code>serviceMetaInfoList</code>。</li><li>对于每个服务实例,会创建 <code>VIRTUAL_NODE_NUM</code> 个虚拟节点,并使用服务实例的地址和虚拟节点编号计算出哈希值,作为虚拟节点在哈希环上的位置。</li><li>然后将这些虚拟节点及对应的服务实例信息存储到 <code>virtualNodes</code> 这个有序 Map 中。</li></ul></li><li><p><strong>请求路由</strong>:</p><ul><li>当客户端发起请求时,会调用 <code>select()</code> 方法进行服务实例的选择。</li><li>首先根据请求参数计算出一个哈希值,表示请求在哈希环上的位置。</li><li>然后在 <code>virtualNodes</code> 中查找最接近且大于该哈希值的虚拟节点。</li><li>如果找不到大于该哈希值的虚拟节点,则选择环上的第一个虚拟节点。</li><li>最终返回对应虚拟节点所映射的服务实例。</li></ul></li></ol><p>这种一致性哈希算法的优点包括:</p><ol><li><p><strong>负载均衡</strong>:<br> 通过将请求映射到虚拟节点上,可以将请求合理地分配到不同的服务实例上。</p></li><li><p><strong>高可扩展性</strong>:<br> 当增加或删除服务实例时,只会影响部分请求的路由,不会导致整体负载的重大变化。</p></li><li><p><strong>请求粘性</strong>:<br> 同一个客户端的请求,往往会路由到同一个服务实例上,有利于保持会话状态。</p></li></ol><p>缺点是:</p><ol><li><p><strong>实现复杂度较高</strong>:<br> 一致性哈希算法的实现相比轮询算法要复杂一些,需要维护虚拟节点环。</p></li><li><p><strong>冷启动问题</strong>:<br> 在系统启动初期,如果服务实例较少,可能会导致负载分布不均匀的问题。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 一致性哈希负载均衡器 （消费端使用）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsistentHashLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 一致性Hash环，存放虚拟节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> virtualNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 虚拟节点数
     *
     * <span class="token keyword">@param</span> <span class="token parameter">requestParams</span> 请求参数
     * <span class="token keyword">@param</span> <span class="token parameter">serviceMetaInfoList</span> 服务列表
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">VIRTUAL_NODE_NUM</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceMetaInfoList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 构建虚拟节点环 每次都重新构建，因为服务列表可能会变化 为了能够及时感知到服务的变化</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">VIRTUAL_NODE_NUM</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                virtualNodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>requestParams<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 选择最接近且大于hash的节点</span>
        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> virtualNodes<span class="token punctuation">.</span><span class="token function">ceilingEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            entry <span class="token operator">=</span> virtualNodes<span class="token punctuation">.</span><span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Hash算法
     *
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加权轮询-随机" tabindex="-1"><a class="header-anchor" href="#加权轮询-随机"><span>加权轮询/随机</span></a></h3><p>比如现在有三台服务器A，B，C。权重占比为：<code>2:3:5</code></p><p>最简单的办法，我们开一个数组 ，把A放两个进去，B放3个进去，C放5个 进去。然后再轮询</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 加权轮询负载均衡
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedRoundRobinLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> currentIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构建</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> weight <span class="token operator">=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 有多少个权重就添加多少个</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentIndex<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceMetaInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题是：如果服务器数量非常大，这种操作就非常浪费性能</p><p>优化办法：不需要使用数组了，我们直接随机10以内的数字，如果超过5那么就是C，小于2那么就是A，剩下的就是B了。</p><p>或者：比如现在权重 <code>2 3 5</code> 算出来<code>pos=6</code></p><p>那么他应该是C服务器，说白了就是求6在数组<code>2 2 3 3 3 5 5 5 5 5</code>是第几个服务器</p><ul><li>先<code>6&gt;2</code>不符合，那么<code>6-2=4</code></li><li>然后<code>4&gt;=3</code>不符合，那么<code>4-3=1</code></li><li>最后<code>1&lt;5</code>符合，所以就是第三个位置</li></ul><p>有点类似于前缀和的思想（如果说服务列表不变，那么我就可以前缀和先预处理，然后二分求位置，速度更快）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedRoundRobinLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计数器  用于轮询</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> totalWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 总权重</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            totalWeight <span class="token operator">+=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> totalWeight<span class="token punctuation">;</span> <span class="token comment">// 取模</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> weight <span class="token operator">=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果当前位置小于权重值，返回当前服务</span>
                <span class="token keyword">return</span> serviceMetaInfo<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pos <span class="token operator">-=</span> weight<span class="token punctuation">;</span> <span class="token comment">// 否则减去权重值，继续循环</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个加权轮询算法的核心思想是,根据每个服务实例的权重,分配不同的请求量。权重越大的实例,分配到的请求也越多。通过轮询的方式,可以保证每个实例都能够得到请求,从而实现负载均衡的目标。</p><h3 id="平滑加权轮询" tabindex="-1"><a class="header-anchor" href="#平滑加权轮询"><span>平滑加权轮询</span></a></h3><p>固定权重：<code>weight=(2,3,5)</code></p><p>动态变化权重：<code>currWeight=(0,0,0)</code></p><table><thead><tr><th>轮次</th><th>currWeight+=weight</th><th>max(currWeight)</th><th>result</th><th>max(currWeight)-=sum(weight)</th></tr></thead><tbody><tr><td>1</td><td>2、3、5</td><td>5</td><td>C</td><td>2、3、-5</td></tr><tr><td>2</td><td>4、6、0</td><td>6</td><td>B</td><td>4、-4、0</td></tr><tr><td>3</td><td>6、-1、5</td><td>6</td><td>A</td><td>-4、-1、5</td></tr><tr><td>4</td><td>-2、2、10</td><td>10</td><td>C</td><td>-2、2、0</td></tr><tr><td>5</td><td>0、5、5</td><td>5</td><td>B</td><td>0、-5、5</td></tr><tr><td>6</td><td>2、-2、10</td><td>10</td><td>C</td><td>-2、2、0</td></tr><tr><td>7</td><td>4、1、5</td><td>5</td><td>C</td><td>4、1、-5</td></tr><tr><td>8</td><td>6、4、0</td><td>6</td><td>A</td><td>-4、4、0</td></tr><tr><td>9</td><td>-2、7、5</td><td>7</td><td>B</td><td>-2、-3、5</td></tr><tr><td>10</td><td>0、0、10</td><td>10</td><td>C</td><td>0、0、0</td></tr></tbody></table><p>这样也可以做到<code>A:B:C=2:3:5</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> houyunfei
 * 加权轮询负载均衡
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedRoundRobinLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计数器  用于轮询</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@AllArgsConstructor</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Weight</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">ServiceMetaInfo</span> info<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> currentWeight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">,</span> <span class="token class-name">Weight</span><span class="token punctuation">&gt;</span></span> currentWeightMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> requestParams<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> totalWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 总权重</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            totalWeight <span class="token operator">+=</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentWeightMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">:</span> serviceMetaInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 初始化权重  currentWeight = 0</span>
                currentWeightMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Weight</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">,</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token comment">// 将权重值加上动态权重</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Weight</span> weight <span class="token operator">:</span> currentWeightMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            weight<span class="token punctuation">.</span><span class="token function">setCurrentWeight</span><span class="token punctuation">(</span>weight<span class="token punctuation">.</span><span class="token function">getCurrentWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> weight<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">// 选出最大的权重</span>
        <span class="token class-name">Weight</span> maxWeight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Weight</span> weight <span class="token operator">:</span> currentWeightMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxWeight <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> weight<span class="token punctuation">.</span><span class="token function">getCurrentWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> maxWeight<span class="token punctuation">.</span><span class="token function">getCurrentWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                maxWeight <span class="token operator">=</span> weight<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将最大的权重减去总权重</span>
        maxWeight<span class="token punctuation">.</span><span class="token function">setCurrentWeight</span><span class="token punctuation">(</span>maxWeight<span class="token punctuation">.</span><span class="token function">getCurrentWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> totalWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回最大权重对应的服务</span>
        <span class="token keyword">return</span> maxWeight<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),i=[l];function u(r,k){return s(),a("div",null,i)}const m=n(o,[["render",u],["__file","负载均衡器实现.html.vue"]]),b=JSON.parse('{"path":"/docs/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E5%AE%9E%E7%8E%B0.html","title":"负载均衡器实现","lang":"en-US","frontmatter":{"date":"2024-05-02T00:00:00.000Z","title":"负载均衡器实现","order":8,"description":"负载均衡器实现 什么是负载均衡？ 在 RPC 框架中,负载均衡是一个非常重要的概念。它指的是将请求流量合理地分配到多个服务提供者实例上,以提高系统的可用性和性能。通过负载均衡，将请求分发给这个集群下的每个服务节点，从而达到多个服务节点共同分担请求压力的目的。 RPC 的负载均衡完全由 RPC 框架自身实现，RPC 的服务调用者会与“注册中心”下发的所有...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"负载均衡器实现"}],["meta",{"property":"og:description","content":"负载均衡器实现 什么是负载均衡？ 在 RPC 框架中,负载均衡是一个非常重要的概念。它指的是将请求流量合理地分配到多个服务提供者实例上,以提高系统的可用性和性能。通过负载均衡，将请求分发给这个集群下的每个服务节点，从而达到多个服务节点共同分担请求压力的目的。 RPC 的负载均衡完全由 RPC 框架自身实现，RPC 的服务调用者会与“注册中心”下发的所有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:56:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"负载均衡器实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T09:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"什么是负载均衡？","slug":"什么是负载均衡","link":"#什么是负载均衡","children":[]},{"level":2,"title":"负载均衡类型","slug":"负载均衡类型","link":"#负载均衡类型","children":[]},{"level":2,"title":"负载均衡算法实现","slug":"负载均衡算法实现","link":"#负载均衡算法实现","children":[{"level":3,"title":"负载均衡接口定义","slug":"负载均衡接口定义","link":"#负载均衡接口定义","children":[]},{"level":3,"title":"随机负载均衡器","slug":"随机负载均衡器","link":"#随机负载均衡器","children":[]},{"level":3,"title":"轮询负载均衡器","slug":"轮询负载均衡器","link":"#轮询负载均衡器","children":[]},{"level":3,"title":"一致性哈希负载均衡器","slug":"一致性哈希负载均衡器","link":"#一致性哈希负载均衡器","children":[]},{"level":3,"title":"加权轮询/随机","slug":"加权轮询-随机","link":"#加权轮询-随机","children":[]},{"level":3,"title":"平滑加权轮询","slug":"平滑加权轮询","link":"#平滑加权轮询","children":[]}]}],"git":{"createdTime":1714651808000,"updatedTime":1714816564000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":9.96,"words":2987},"filePathRelative":"docs/负载均衡器实现.md","localizedDate":"May 2, 2024","excerpt":"\\n<h2>什么是负载均衡？</h2>\\n<p>在 RPC 框架中,负载均衡是一个非常重要的概念。它指的是将请求流量合理地分配到多个服务提供者实例上,以提高系统的可用性和性能。通过负载均衡，将请求分发给这个集群下的每个服务节点，从而达到多个服务节点共同分担请求压力的目的。</p>\\n<p>RPC 的负载均衡完全由 RPC 框架自身实现，RPC 的服务调用者会与“注册中心”下发的所有服务节点建立长连接，在每次发起 RPC 调用时，服务调用者都会通过配置的负载均衡插件，自主选择一个服务节点，发起 RPC 调用请求。</p>","autoDesc":true}');export{m as comp,b as data};
