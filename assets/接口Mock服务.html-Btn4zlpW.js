import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-OThu-93n.js";const e={},p=t(`<h1 id="接口mock服务" tabindex="-1"><a class="header-anchor" href="#接口mock服务"><span>接口Mock服务</span></a></h1><h2 id="什么是接口mock服务" tabindex="-1"><a class="header-anchor" href="#什么是接口mock服务"><span>什么是接口Mock服务？</span></a></h2><p>接口 Mock 服务是一种用于模拟接口行为的技术,它的主要目的是为了在实际服务还未就绪的情况下,提供模拟的接口数据,使得依赖该接口的其他团队或系统可以独立进行开发和测试工作。</p><h2 id="为什么要接口mock服务" tabindex="-1"><a class="header-anchor" href="#为什么要接口mock服务"><span>为什么要接口Mock服务？</span></a></h2><p>​ 在传统前后端分离开发的场景下，前端和后端一般定好 HTTP API 接口后就各自进行开发，前端开发中使用 EasyMock、webpack-api-mock 等平台/工具进行接口的 mock，后端通过 Postman / curl 等工具进行接口的自测。</p><p>​ 在微服务场景下，各服务之间通过 IDL 定义好 RPC 接口。但是接口调用方依然有 mock 接口的需求，接口提供方也有着自测接口的需求。公司内的服务化平台已经提供了较为完善的接口测试工具，自己实现一个相对也比较容易，但目前却没有一个比较完善的 RPC Mock 方案。</p><p>​ 在新项目启动后，前端、API 层和依赖的 Service 往往同步开始开发，只要依赖的 Service 未提供，API 和前端的开发、自测都会被阻塞，在侧重数据展示类需求的项目中这种问题更加严重。</p><p>​ 所以，有必要尝试探索一套 RPC Mock 的方案，在保证开发者使用体验的前提下，解决上述问题。除此之外 ，使用接口 Mock 服务还主要有以下几个原因:</p><ol><li><p>提高开发效率:减少等待实际服务开发完成的时间,从而加快开发进度。</p></li><li><p>降低成本和风险:在开发早期发现问题,避免后期集成时出现的问题。</p></li><li><p>支持自动化测试:提供可控的测试环境,有助于实现更全面的自动化测试。</p></li><li><p>模拟异常场景:模拟各种异常情况,如超时、错误码等,帮助开发人员进行容错性测试。</p></li><li><p>提高系统可用性:当实际服务不可用时,作为备用方案提高整体系统的可用性。</p></li></ol><h2 id="mock服务实现" tabindex="-1"><a class="header-anchor" href="#mock服务实现"><span>Mock服务实现</span></a></h2><p>我们可以使用动态代理，在创建调用方法的时候返回固定值对象即可。</p><p>依赖安装：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.jsonzou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmockdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取Mock代理的 工厂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProxyFactory</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据服务类 获取Mock代理对象
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMockProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> serviceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                serviceClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>serviceClass<span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">MockServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mock代理的具体实现：</p><p>如下，我们是通过JMockData来实现模拟数据的获取</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Mock 服务代理 JDK动态代理
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 调用代理
     *
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据方法的返回值类型，生成特定的默认值对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> mockData <span class="token operator">=</span> <span class="token class-name">JMockData</span><span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;mockData:{}&quot;</span><span class="token punctuation">,</span> mockData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mockData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 代理</span>
        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token class-name">ServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">getMockProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">short</span> number <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;number:{}&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user:{}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="https://s2.loli.net/2024/05/02/J7N5GXgQxtnTzjL.webp" alt="image-20240502162101815"></p>`,22),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","接口Mock服务.html.vue"]]),d=JSON.parse('{"path":"/docs/%E6%8E%A5%E5%8F%A3Mock%E6%9C%8D%E5%8A%A1.html","title":"接口Mock服务","lang":"en-US","frontmatter":{"date":"2024-05-02T00:00:00.000Z","title":"接口Mock服务","order":4,"description":"接口Mock服务 什么是接口Mock服务？ 接口 Mock 服务是一种用于模拟接口行为的技术,它的主要目的是为了在实际服务还未就绪的情况下,提供模拟的接口数据,使得依赖该接口的其他团队或系统可以独立进行开发和测试工作。 为什么要接口Mock服务？ ​ 在传统前后端分离开发的场景下，前端和后端一般定好 HTTP API 接口后就各自进行开发，前端开发中使...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E6%8E%A5%E5%8F%A3Mock%E6%9C%8D%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"接口Mock服务"}],["meta",{"property":"og:description","content":"接口Mock服务 什么是接口Mock服务？ 接口 Mock 服务是一种用于模拟接口行为的技术,它的主要目的是为了在实际服务还未就绪的情况下,提供模拟的接口数据,使得依赖该接口的其他团队或系统可以独立进行开发和测试工作。 为什么要接口Mock服务？ ​ 在传统前后端分离开发的场景下，前端和后端一般定好 HTTP API 接口后就各自进行开发，前端开发中使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2024/05/02/J7N5GXgQxtnTzjL.webp"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T13:03:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T13:03:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口Mock服务\\",\\"image\\":[\\"https://s2.loli.net/2024/05/02/J7N5GXgQxtnTzjL.webp\\"],\\"datePublished\\":\\"2024-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T13:03:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"什么是接口Mock服务？","slug":"什么是接口mock服务","link":"#什么是接口mock服务","children":[]},{"level":2,"title":"为什么要接口Mock服务？","slug":"为什么要接口mock服务","link":"#为什么要接口mock服务","children":[]},{"level":2,"title":"Mock服务实现","slug":"mock服务实现","link":"#mock服务实现","children":[]}],"git":{"createdTime":1714638307000,"updatedTime":1714827784000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":2.71,"words":813},"filePathRelative":"docs/接口Mock服务.md","localizedDate":"May 2, 2024","excerpt":"\\n<h2>什么是接口Mock服务？</h2>\\n<p>接口 Mock 服务是一种用于模拟接口行为的技术,它的主要目的是为了在实际服务还未就绪的情况下,提供模拟的接口数据,使得依赖该接口的其他团队或系统可以独立进行开发和测试工作。</p>\\n<h2>为什么要接口Mock服务？</h2>\\n<p>​\\t\\t在传统前后端分离开发的场景下，前端和后端一般定好 HTTP API 接口后就各自进行开发，前端开发中使用 EasyMock、webpack-api-mock 等平台/工具进行接口的 mock，后端通过 Postman / curl 等工具进行接口的自测。</p>","autoDesc":true}');export{r as comp,d as data};
