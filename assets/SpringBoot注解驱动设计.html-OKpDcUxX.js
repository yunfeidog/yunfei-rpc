import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as p,b as c,d as n,e as o,w as l,a as i}from"./app-VzeWgQFY.js";const u={},r=i(`<h1 id="springboot注解驱动设计" tabindex="-1"><a class="header-anchor" href="#springboot注解驱动设计"><span>SpringBoot注解驱动设计</span></a></h1><p>在Dubbo中，我们想要使用Dubbo框架的RPC远程调用功能，主要有三步：</p><ul><li>在启动类上加<code>@EnableDubbo</code></li><li>在提供方类上加：<code>@DubboService</code></li><li>在消费者注入的类上加：<code>@DubboReference</code></li></ul><p>我们参考Dubbo，也开发这样三个注解就可以使用整个RPC框架</p><h2 id="项目初始化" tabindex="-1"><a class="header-anchor" href="#项目初始化"><span>项目初始化</span></a></h2><p>新建一个SpringBoot项目，加入相关依赖，插件，以及build都不需要</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.yunfei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>yunfei-rpc-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个插件的主要作用是用户在写yml的时候可以有注释</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解设计" tabindex="-1"><a class="header-anchor" href="#注解设计"><span>注解设计</span></a></h2><h3 id="enableyunrpc" tabindex="-1"><a class="header-anchor" href="#enableyunrpc"><span>@EnableYunRpc</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RpcInitBootStrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcProviderBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcConsumerBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableYunRpc</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 需要启动server
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">needServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@EnableYunRpc</code> 注解的设计:</p><ol><li><p><code>@Target({ElementType.TYPE})</code>:</p><ul><li>这个注解用于指定 <code>@EnableYunRpc</code> 注解可以被应用于哪些程序元素。在这里,它被限定为只能应用于类型(Type)级别,也就是类、接口或枚举。</li></ul></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code>:</p><ul><li>这个注解用于指定 <code>@EnableYunRpc</code> 注解的保留策略。<code>RUNTIME</code> 表示该注解会在运行时被 JVM 读取和使用,可以被反射机制访问。</li></ul></li><li><p><code>@Import({RpcInitBootStrap.class, RpcProviderBootstrap.class, RpcConsumerBootstrap.class})</code>:</p><ul><li>这个注解用于导入其他配置类。在这里,它导入了三个引导类: <ul><li><code>RpcInitBootStrap</code>: RPC 应用程序的初始化引导类。</li><li><code>RpcProviderBootstrap</code>: RPC 服务提供者的引导类。</li><li><code>RpcConsumerBootstrap</code>: RPC 服务消费者的引导类。</li></ul></li><li>当 <code>@EnableYunRpc</code> 注解被应用到一个类上时,Spring 容器会自动注册这三个引导类。</li></ul></li><li><p><code>public @interface EnableYunRpc {}</code>:</p><ul><li>这是一个自定义注解的声明,名为 <code>@EnableYunRpc</code>。通过这个注解,开发者可以在自己的应用程序中开启 RPC 相关的功能。</li></ul></li><li><p><code>boolean needServer() default true;</code>:</p><ul><li>这是 <code>@EnableYunRpc</code> 注解中定义的一个属性。它用于指定是否需要启动 RPC 服务端。默认值为 <code>true</code>。</li><li>开发者可以通过设置这个属性的值来决定是否需要启动 RPC 服务端,例如在仅作为 RPC 客户端的场景下,可以将其设置为 <code>false</code>。</li></ul></li></ol><p>这个 <code>@EnableYunRpc</code> 注解是一个基于 Spring 的注解驱动设计模式,它可以帮助开发者快速地在自己的应用程序中集成 RPC 功能。通过将引导类的注册和初始化过程封装在这个注解中,开发者只需要简单地在入口类上添加该注解,就可以自动完成 RPC 相关的配置和初始化。</p><h3 id="yunrpcservice" tabindex="-1"><a class="header-anchor" href="#yunrpcservice"><span>@YunRpcService</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">YunRpcService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 服务接口类
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务版本
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RpcConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_SERVICE_VERSION</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@YunRpcService</code> 注解主要用于标注 RPC 服务提供者。</p><ol><li><p><code>@Target({ElementType.TYPE})</code>:</p><ul><li>这个元注解指定了 <code>@YunRpcService</code> 注解可以被应用于类型(Type)级别,也就是类、接口或枚举。</li></ul></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code>:</p><ul><li>这个元注解指定了 <code>@YunRpcService</code> 注解的保留策略是在运行时被 JVM 读取和使用。</li></ul></li><li><p><code>@Component</code>:</p><ul><li>这个元注解将 <code>@YunRpcService</code> 注解标记为 Spring 组件,意味着被这个注解标注的类会被 Spring 容器自动扫描和注册。</li></ul></li><li><p><code>public @interface YunRpcService {}</code>:</p><ul><li>这是 <code>@YunRpcService</code> 注解本身的声明。它定义了这个注解的名称和作用域。</li></ul></li><li><p><code>Class&lt;?&gt; interfaceClass() default void.class;</code>:</p><ul><li>这是 <code>@YunRpcService</code> 注解定义的一个属性,用于指定服务接口类。</li><li>如果不设置该属性,默认值为 <code>void.class</code>。</li></ul></li><li><p><code>String serviceVersion() default RpcConstant.DEFAULT_SERVICE_VERSION;</code>:</p><ul><li>这是 <code>@YunRpcService</code> 注解定义的另一个属性,用于指定服务的版本号。</li><li>如果不设置该属性,默认值为 <code>RpcConstant.DEFAULT_SERVICE_VERSION</code>。</li></ul></li></ol><p><code>@YunRpcService</code> 注解的设计目的是为了简化 RPC 服务提供者的配置。当一个类被这个注解标注时,Spring 容器会自动扫描并注册该服务,同时也会提取服务接口类和版本号等元信息。这些信息可以在后续的服务发现和调用过程中使用。</p><h3 id="yunrpcreference" tabindex="-1"><a class="header-anchor" href="#yunrpcreference"><span>@YunRpcReference</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">YunRpcReference</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 服务接口类
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务版本
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RpcConstant</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_SERVICE_VERSION</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 负载均衡策略
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">loadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">LoadBalancerKeys</span><span class="token punctuation">.</span><span class="token constant">ROUND_ROBIN</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 重试策略
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">retryStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">RetryStrategyKeys</span><span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 容错策略
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">tolerantStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TolerantStrategyKeys</span><span class="token punctuation">.</span><span class="token constant">FAIL_FAST</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 是否mock
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>@YunRpcReference</code> 注解是用于标注 RPC 服务消费者端的注解。</p><ol><li><p><code>@Target({ElementType.FIELD})</code>:</p><ul><li>这个元注解指定了 <code>@YunRpcReference</code> 注解只能被应用在字段(Field)级别。</li></ul></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code>:</p><ul><li>这个元注解指定了 <code>@YunRpcReference</code> 注解的保留策略是在运行时被 JVM 读取和使用。</li></ul></li><li><p><code>public @interface YunRpcReference {}</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解本身的声明。它定义了这个注解的名称和作用域。</li></ul></li><li><p><code>Class&lt;?&gt; interfaceClass() default void.class;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的一个属性,用于指定服务接口类。</li><li>如果不设置该属性,默认值为 <code>void.class</code>。</li></ul></li><li><p><code>String serviceVersion() default RpcConstant.DEFAULT_SERVICE_VERSION;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的另一个属性,用于指定服务的版本号。</li><li>如果不设置该属性,默认值为 <code>RpcConstant.DEFAULT_SERVICE_VERSION</code>。</li></ul></li><li><p><code>String loadBalancer() default LoadBalancerKeys.ROUND_ROBIN;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的一个属性,用于指定负载均衡策略。</li><li>如果不设置该属性,默认值为 <code>LoadBalancerKeys.ROUND_ROBIN</code>。</li></ul></li><li><p><code>String retryStrategy() default RetryStrategyKeys.NO;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的一个属性,用于指定重试策略。</li><li>如果不设置该属性,默认值为 <code>RetryStrategyKeys.NO</code>。</li></ul></li><li><p><code>String tolerantStrategy() default TolerantStrategyKeys.FAIL_FAST;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的一个属性,用于指定容错策略。</li><li>如果不设置该属性,默认值为 <code>TolerantStrategyKeys.FAIL_FAST</code>。</li></ul></li><li><p><code>boolean mock() default false;</code>:</p><ul><li>这是 <code>@YunRpcReference</code> 注解定义的一个属性,用于指定是否使用 Mock 模式。</li><li>如果不设置该属性,默认值为 <code>false</code>。</li></ul></li></ol><p>总的来说,<code>@YunRpcReference</code> 注解的设计目的是为了简化 RPC 服务消费者的配置。当一个字段被这个注解标注时,Spring 容器会自动注入一个代理对象,该代理对象会负责执行 RPC 调用。开发者可以通过设置注解属性来配置负载均衡、重试、容错等策略,以满足不同的业务需求。</p><h2 id="注解驱动" tabindex="-1"><a class="header-anchor" href="#注解驱动"><span>注解驱动</span></a></h2><h3 id="全局启动类" tabindex="-1"><a class="header-anchor" href="#全局启动类"><span>全局启动类</span></a></h3><p>我们希望在Spring框架初始化的时候，能够获取<code>@EnableYunRpc</code>注解，并且初始化RPC框架。</p><p>可以使用Spring的<code>ImportBeanDefinitionRegistrar</code>接口来实现，此接口用于在 Spring 容器初始化时执行自定义的注册逻辑。</p><p>具体的自定义的注册逻辑写在<code>registerBeanDefinitions</code>方法里面</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcInitBootStrap</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Spring初始化执行时候，初始化Rpc框架
     *
     * <span class="token keyword">@param</span> <span class="token parameter">importingClassMetadata</span>
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取EnableRpc 注解的属性值</span>
        <span class="token keyword">boolean</span> needServer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableYunRpc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;needServer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Rpc框架初始化（配置和注册中心）</span>
        <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">RpcConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动服务器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>needServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">VertxTcpServer</span> vertxTcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VertxTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            vertxTcpServer<span class="token punctuation">.</span><span class="token function">doStart</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Rpc server is not started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>RpcInitBootStrap</code> 类负责在 Spring 容器初始化时执行 RPC 框架的初始化和服务端启动逻辑。</p><p>它利用 <code>@EnableYunRpc</code> 注解中的 <code>needServer</code> 属性,来决定是否需要启动 RPC 服务端。这种设计可以让 RPC 框架在 Spring Boot 应用中更加灵活和可配置。</p><h3 id="提供者启动" tabindex="-1"><a class="header-anchor" href="#提供者启动"><span>提供者启动</span></a></h3><p>提供者需要获取到所有包含<code>@YunRpcService</code>的注解的类，然后利用反射机制，获取到对应的注册信息，完成服务信息的注册。</p><p>我们让启动类实现<code>BeanPostProcessor</code>接口里的<code>postProcessAfterInitialization</code>方法，就可以在服务提供者Bean初始化之后，执行注册服务等操作了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcProviderBootstrap</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">YunRpcService</span> rpcService <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">YunRpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 需要注册服务</span>
            <span class="token comment">// 获取服务基本信息</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> rpcService<span class="token punctuation">.</span><span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 默认值处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                interfaceClass <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span> serviceName <span class="token operator">=</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> serviceVersion <span class="token operator">=</span> rpcService<span class="token punctuation">.</span><span class="token function">serviceVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 注册服务</span>
            <span class="token comment">// 本地注册</span>
            <span class="token class-name">LocalRegistry</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 全局配置</span>
            <span class="token keyword">final</span> <span class="token class-name">RpcConfig</span> rpcConfig <span class="token operator">=</span> <span class="token class-name">RpcApplication</span><span class="token punctuation">.</span><span class="token function">getRpcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 注册到注册中心</span>
            <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceVersion</span><span class="token punctuation">(</span>serviceVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServiceHost</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serviceMetaInfo<span class="token punctuation">.</span><span class="token function">setServicePort</span><span class="token punctuation">(</span>rpcConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>获取服务基本信息:</p><ul><li>首先从 <code>@YunRpcService</code> 注解中获取 <code>interfaceClass</code> 属性的值。这个属性指定了服务的接口类。</li><li>如果 <code>interfaceClass</code> 的值为 <code>void.class</code>(默认值),则说明开发者没有手动指定接口类,于是取当前 Bean 实例的第一个接口作为服务接口。</li><li>使用服务接口类的名称作为 <code>serviceName</code>。</li><li>从 <code>@YunRpcService</code> 注解中获取 <code>serviceVersion</code> 属性的值。</li></ul></li><li><p>本地注册服务:</p><ul><li>使用 <code>LocalRegistry.register(serviceName, beanClass)</code> 方法将服务信息注册到本地注册表中。这样在后续的 RPC 调用中,就可以从本地注册表中获取到服务的实现类。</li></ul></li></ol><h3 id="消费者启动" tabindex="-1"><a class="header-anchor" href="#消费者启动"><span>消费者启动</span></a></h3><p><code>RpcConsumerBootstrap</code> 类是 RPC 服务消费者的引导类,它同样实现了 Spring 的 <code>BeanPostProcessor</code> 接口。它的主要作用是在 Spring 容器初始化 Bean 实例后,检查这些 Bean 中是否有被 <code>@YunRpcReference</code> 注解标注的字段,如果有,则为这些字段生成代理对象并注入。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcConsumerBootstrap</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历对象的所有属性</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">YunRpcReference</span> rpcReference <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">YunRpcReference</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rpcReference <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 为属性生成代理对象</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> interfaceClass <span class="token operator">=</span> rpcReference<span class="token punctuation">.</span><span class="token function">interfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaceClass <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    interfaceClass <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;生成代理对象:&quot;</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;  &quot;</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;生成代理对象:{}&quot;</span><span class="token punctuation">,</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">ServiceProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;生成代理对象失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们逐步解析这个类的实现:</p><ol><li><code>Field[] declaredFields = beanClass.getDeclaredFields();</code>:这行代码获取当前 Bean 实例的所有声明字段。</li><li><code>YunRpcReference rpcReference = field.getAnnotation(YunRpcReference.class);</code>:如果字段被 <code>@YunRpcReference</code> 注解标注,则获取该注解实例。</li><li><code>if (rpcReference != null) { ... }</code>: <ul><li>如果字段被 <code>@YunRpcReference</code> 注解标注,则执行以下逻辑: <ul><li>获取服务接口类,如果未指定则默认使用字段类型。</li><li>使用 <code>ServiceProxyFactory.getProxy(interfaceClass)</code> 方法为服务接口生成代理对象。</li><li>将生成的代理对象设置到当前 Bean 实例的字段上。</li></ul></li></ul></li><li><code>return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);</code>: <ul><li>最后,调用父类 <code>BeanPostProcessor</code> 的 <code>postProcessAfterInitialization()</code> 方法,确保其他 <code>BeanPostProcessor</code> 实现也能正确执行。</li></ul></li></ol><h3 id="注册已编写的启动类" tabindex="-1"><a class="header-anchor" href="#注册已编写的启动类"><span>注册已编写的启动类</span></a></h3><p>最后还需要在启动类上面使用<code>@Import</code>到注册我们自定义的启动类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RpcInitBootStrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcProviderBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RpcConsumerBootstrap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableYunRpc</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 需要启动server
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">needServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2>`,47);function d(k,v){const s=e("RouteLink");return t(),p("div",null,[r,c("p",null,[n("见快速入门："),o(s,{to:"/docs/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"},{default:l(()=>[n("快速入门")]),_:1})])])}const g=a(u,[["render",d],["__file","SpringBoot注解驱动设计.html.vue"]]),f=JSON.parse('{"path":"/docs/SpringBoot%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html","title":"SpringBoot注解驱动设计","lang":"en-US","frontmatter":{"date":"2024-05-04T00:00:00.000Z","title":"SpringBoot注解驱动设计","order":13,"description":"SpringBoot注解驱动设计 在Dubbo中，我们想要使用Dubbo框架的RPC远程调用功能，主要有三步： 在启动类上加@EnableDubbo 在提供方类上加：@DubboService 在消费者注入的类上加：@DubboReference 我们参考Dubbo，也开发这样三个注解就可以使用整个RPC框架 项目初始化 新建一个SpringBoot项...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/SpringBoot%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"SpringBoot注解驱动设计"}],["meta",{"property":"og:description","content":"SpringBoot注解驱动设计 在Dubbo中，我们想要使用Dubbo框架的RPC远程调用功能，主要有三步： 在启动类上加@EnableDubbo 在提供方类上加：@DubboService 在消费者注入的类上加：@DubboReference 我们参考Dubbo，也开发这样三个注解就可以使用整个RPC框架 项目初始化 新建一个SpringBoot项..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T13:03:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T13:03:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot注解驱动设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T13:03:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"项目初始化","slug":"项目初始化","link":"#项目初始化","children":[]},{"level":2,"title":"注解设计","slug":"注解设计","link":"#注解设计","children":[{"level":3,"title":"@EnableYunRpc","slug":"enableyunrpc","link":"#enableyunrpc","children":[]},{"level":3,"title":"@YunRpcService","slug":"yunrpcservice","link":"#yunrpcservice","children":[]},{"level":3,"title":"@YunRpcReference","slug":"yunrpcreference","link":"#yunrpcreference","children":[]}]},{"level":2,"title":"注解驱动","slug":"注解驱动","link":"#注解驱动","children":[{"level":3,"title":"全局启动类","slug":"全局启动类","link":"#全局启动类","children":[]},{"level":3,"title":"提供者启动","slug":"提供者启动","link":"#提供者启动","children":[]},{"level":3,"title":"消费者启动","slug":"消费者启动","link":"#消费者启动","children":[]},{"level":3,"title":"注册已编写的启动类","slug":"注册已编写的启动类","link":"#注册已编写的启动类","children":[]}]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]}],"git":{"createdTime":1714799705000,"updatedTime":1714827784000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":8.78,"words":2635},"filePathRelative":"docs/SpringBoot注解驱动设计.md","localizedDate":"May 4, 2024","excerpt":"\\n<p>在Dubbo中，我们想要使用Dubbo框架的RPC远程调用功能，主要有三步：</p>\\n<ul>\\n<li>在启动类上加<code>@EnableDubbo</code></li>\\n<li>在提供方类上加：<code>@DubboService</code></li>\\n<li>在消费者注入的类上加：<code>@DubboReference</code></li>\\n</ul>\\n<p>我们参考Dubbo，也开发这样三个注解就可以使用整个RPC框架</p>","autoDesc":true}');export{g as comp,f as data};
