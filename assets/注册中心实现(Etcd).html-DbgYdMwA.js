import{_ as e,a as p,b as c}from"./watch-uDHs4R3n.js";import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as u,a as n,b as s,d as k,e as a}from"./app-BVuvStlx.js";const r={},d=a('<h1 id="注册中心实现-etcd" tabindex="-1"><a class="header-anchor" href="#注册中心实现-etcd"><span>注册中心实现(Etcd)</span></a></h1><h2 id="什么是注册中心" tabindex="-1"><a class="header-anchor" href="#什么是注册中心"><span>什么是注册中心？</span></a></h2><p>注册中心(Service Registry)是 RPC 框架中非常重要的一个组件,它的主要作用包括以下几点:</p><ol><li><p><strong>服务注册</strong></p><ul><li>服务提供者在启动时,会将自己的服务信息(如服务名、地址、端口等)注册到注册中心。</li><li>注册中心负责维护这些服务的注册信息,为服务消费者提供查询。</li></ul></li><li><p><strong>服务发现</strong></p><ul><li>服务消费者在需要调用服务时,会查询注册中心获取可用的服务提供者信息。</li><li>注册中心根据负载均衡策略选择合适的服务实例,返回给消费者。</li></ul></li><li><p><strong>服务状态管理</strong></p><ul><li>注册中心会定期检查服务实例的健康状态,并及时更新注册信息。</li><li>当某个服务实例下线或者故障时,注册中心会将其从服务列表中剔除。</li></ul></li><li><p><strong>服务治理</strong></p><ul><li>注册中心可以提供服务分组、服务版本管理等功能,支持更细粒度的服务治理。</li><li>通过注册中心,可以实现服务的权重调整、灰度发布等高级特性。</li></ul></li></ol><p>用一张图来表示在本RPC项目中注册中心的作用,服务提供者把服务的信息放到注册中心中，消费者去注册中心服务发现，获取要调用的服务，然后再向服务提供者发起调用：</p><p><img src="'+e+'" alt="registry.svg"></p><h3 id="注册中心有哪些" tabindex="-1"><a class="header-anchor" href="#注册中心有哪些"><span>注册中心有哪些？</span></a></h3><ol><li><strong>Zookeeper</strong>: 分布式协调服务,广泛应用于 Dubbo、Kafka 等 RPC 框架中。</li><li><strong>Consul</strong>: HashiCorp 公司开源的服务网格解决方案,集成了注册中心、服务发现等功能。</li><li><strong>Eureka</strong>: Netflix 开源的服务注册中心,曾广泛应用于 Spring Cloud 生态。</li><li><strong>etcd</strong>: CoreOS 公司开源的分布式键值存储,也可用作注册中心。</li><li><strong>Nacos</strong>: Alibaba 开源的应用管理与服务治理平台,集成了注册中心、配置管理等功能。</li></ol><p>注册中心作为 RPC 框架的核心组件,它的可靠性和性能对整个分布式系统的可用性都有重要影响。</p><h2 id="注册中心设计" tabindex="-1"><a class="header-anchor" href="#注册中心设计"><span>注册中心设计</span></a></h2><p>我们的注册中心需要实现几个关键的能力：</p><ol><li><p><strong>服务注册和发现</strong></p><ul><li>服务提供者在启动时将自身信息<strong>注册</strong>到注册中心。</li><li>服务消费者通过注册中心<strong>查找并调用</strong>可用的服务提供者。</li><li>注册中心需要提供高效的查询和路由机制,确保服务发现的性能。</li></ul></li><li><p><strong>服务健康检查</strong></p><ul><li>注册中心需要定期检查服务实例的健康状态,及时<strong>剔除下线</strong>或故障的服务。</li><li>健康检查可以通过<strong>心跳机制、TCP 连接检测</strong>等方式实现。</li><li>注册中心需要处理服务实例的上下线事件,并通知相关的服务消费者。</li></ul></li><li><p><strong>负载均衡策略</strong></p><ul><li>当存在多个可用的服务提供者时,注册中心需要根据负载均衡策略选择合适的实例。</li><li>常见的负载均衡策略包括随机、轮询、加权轮询、最小活跃连接数等。</li><li>注册中心需要根据服务实例的负载情况动态调整负载均衡策略。</li></ul></li><li><p><strong>服务元数据管理</strong></p><ul><li>注册中心需要<strong>存储服务提供者的详细元数据信息,如服务名称、版本、实例地址</strong>等。</li><li>这些元数据信息可以帮助服务消费者做更精细的服务选择和调用。</li><li>注册中心需要提供元数据的增删改查等管理功能。</li></ul></li><li><p><strong>服务治理能力</strong></p><ul><li>注册中心可以提供服务分组、服务权重、路由规则等高级服务治理功能。</li><li>这些功能可以帮助开发者实现更细粒度的服务管控,如灰度发布、流量控制等。</li><li>注册中心需要设计可扩展的架构,支持服务治理功能的灵活配置和动态调整。</li></ul></li><li><p><strong>高可用和容错</strong></p><ul><li>注册中心自身需要具备高可用性,避免单点故障。</li><li>可以采用主备复制、分布式部署等方式来提高可用性。</li><li>注册中心还需要考虑服务发现的容错性,在注册中心宕机时仍能保证服务调用。</li></ul></li><li><p><strong>性能和扩展性</strong></p><ul><li>注册中心需要支撑大规模的服务注册和发现,具备良好的性能表现。</li><li>可以采用分片、缓存、异步等手段来提高注册中心的吞吐量和响应速度。</li><li>注册中心的架构还需要具备良好的扩展性,以应对不断增长的服务规模。</li></ul></li></ol><p>用一张图来表示注册中心要实现的功能</p><p><img src="'+p+'" alt="registry2.svg"></p><p>一些功能如 负载均衡我们已经在RPC层实现过了，注册中心可以暂时不实现，主要实现几个核心的：</p><ul><li>服务注册、服务发现、服务剔除、心跳检测、数据存储</li></ul><h2 id="技术选型etcd" tabindex="-1"><a class="header-anchor" href="#技术选型etcd"><span>技术选型Etcd</span></a></h2><p>对于注册中心的技术选型，我们需要考虑它的性能，高可用性，高可靠性，稳定性，数据一致性等内容。</p><p>高可靠和高可用非要重要，如果注册中心都挂了，那么会影响到所有服务调用。</p>',19),v={href:"https://etcd.io/",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="etcd介绍" tabindex="-1"><a class="header-anchor" href="#etcd介绍"><span>Etcd介绍</span></a></h3><p>etcd（读作 et-see-dee）是一种开源的分布式统一键值存储，用于分布式系统或计算机集群的共享配置、服务发现和的调度协调。etcd 有助于促进更加安全的自动更新，协调向主机调度的工作，并帮助设置容器的覆盖网络。</p><p>etcd 是许多其他项目的核心组件。最值得注意的是，它是 <strong>Kubernetes</strong> 的首要数据存储，也是容器编排的实际标准系统。使用 etcd， 云原生应用可以保持更为一致的运行时间，而且在个别服务器发生故障时也能正常工作。应用从 etcd 读取数据并写入到其中；通过分散配置数据，为节点配置提供冗余和弹性。</p><h3 id="服务元信息设计" tabindex="-1"><a class="header-anchor" href="#服务元信息设计"><span>服务元信息设计</span></a></h3><p>ServiceMetaInfo是注册中心中服务的元数据信息,包含服务名称、版本、地址、权重等关键属性,为服务注册、发现等功能提供了基础数据模型。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 服务元信息 （注册信息）
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceMetaInfo</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 服务名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务版本号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceVersion <span class="token operator">=</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务地址
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceAddress<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务分组（暂未实现）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceGroup <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> serviceHost<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> servicePort<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务权重
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取服务键名
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> serviceVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取服务节点键名
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s/%s:%s&quot;</span><span class="token punctuation">,</span> <span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceHost<span class="token punctuation">,</span>servicePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取完整的服务地址
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServiceAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>serviceHost<span class="token punctuation">,</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;http://%s:%s&quot;</span><span class="token punctuation">,</span> serviceHost<span class="token punctuation">,</span> servicePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> serviceHost<span class="token punctuation">,</span> servicePort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册中心配置" tabindex="-1"><a class="header-anchor" href="#注册中心配置"><span>注册中心配置</span></a></h3><p>注册中心配置主要包括：注册中心类别、地址、用户名、密码、超时时间。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yunfei<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yunfei<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">RegistryKeys</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * RPC注册中心配置
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 注册中心类别
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryKeys</span><span class="token punctuation">.</span><span class="token constant">ETCD</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注册中心地址
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;http://localhost:2380&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用户名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 密码
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 超时时间 ms
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> timeout <span class="token operator">=</span> <span class="token number">10000L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册中心接口" tabindex="-1"><a class="header-anchor" href="#注册中心接口"><span>注册中心接口</span></a></h3><p>我们可能会有多个注册中心，它和我们的序列化器一样，都应该可以支持使用Java的SPI机制进行动态加载，例如注册中心我们可以在配置文件中设置，可以选用Zookeeper、Redis、Nacos等等。</p><p>接口主要提供：初始化、服务注册、服务发现 、注销服务、心跳检测、节点监听功能。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注册中心接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Registry</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 初始化
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registryConfig</span>
     */</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span> registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 注册服务 服务端
     *
     * <span class="token keyword">@param</span> <span class="token parameter">serviceMetaInfo</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 取消注册服务 服务端
     *
     * <span class="token keyword">@param</span> <span class="token parameter">serviceMetaInfo</span>
     */</span>
    <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务发现  获取某服务的所有节点  客户端 消费端
     *
     * <span class="token keyword">@param</span> <span class="token parameter">serviceKey</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">serviceDiscovery</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 服务销毁
     */</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 心跳检测
     */</span>
    <span class="token keyword">void</span> <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 监听服务节点
     */</span>
    <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceNodeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="etcd注册中心实现" tabindex="-1"><a class="header-anchor" href="#etcd注册中心实现"><span>Etcd注册中心实现</span></a></h3><h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Client</span> client<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">KV</span> kvClient<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 根节点
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ETCD_ROOT_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;/rpc/&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 本地注册节点 key 集合 用于维护续期
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> localRegisterNodeKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 注册中心缓存
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RegistryServiceCache</span> registryServiceCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryServiceCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 监听的key集合
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> watchingKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>初始化主要是为了创建Etcd的client和KVClient对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span> registryConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endpoints</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    kvClient <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getKVClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册"><span>服务注册</span></a></h4><p>服务注册主要就是把键值对保存到Etcd中：</p><ul><li>键是：ETCD_ROOT_PATH + serviceMetaInfo.getServiceNodeKey() 相当于一个唯一标识</li><li>值是：服务的元信息serviceMetaInfo</li></ul><p>同时我们需要设置过期时间30s，用于剔除过期节点、心跳检测。这样如果服务提供者宕机了，也可以超时自动移除</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建Lease 和KV客户端</span>
    <span class="token class-name">Lease</span> leaseClient <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getLeaseClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建租约 30s</span>
    <span class="token keyword">long</span> leaseId <span class="token operator">=</span> leaseClient<span class="token punctuation">.</span><span class="token function">grant</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置要存储的键值对</span>
    <span class="token class-name">String</span> registerKey <span class="token operator">=</span> <span class="token constant">ETCD_ROOT_PATH</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteSequence</span> key <span class="token operator">=</span> <span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteSequence</span> value <span class="token operator">=</span> <span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将键值对与租约绑定 并设置过期时间</span>
    <span class="token class-name">PutOption</span> putOption <span class="token operator">=</span> <span class="token class-name">PutOption</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withLeaseId</span><span class="token punctuation">(</span>leaseId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    kvClient<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> putOption<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    localRegisterNodeKeySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务取消注册" tabindex="-1"><a class="header-anchor" href="#服务取消注册"><span>服务取消注册</span></a></h4><p>即从Etcd中删除对应的服务节点信息，本地集合 也要删。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unRegister</span><span class="token punctuation">(</span><span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> registerKey <span class="token operator">=</span> <span class="token constant">ETCD_ROOT_PATH</span> <span class="token operator">+</span> serviceMetaInfo<span class="token punctuation">.</span><span class="token function">getServiceNodeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    kvClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    localRegisterNodeKeySet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>registerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h4><p>我们有一个本地缓存数组serviceCache:它的实现很简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryServiceCache</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 服务缓存
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceCache<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 写缓存
     */</span>
    <span class="token keyword">void</span> <span class="token function">writeCache</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> newServiceCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serviceCache <span class="token operator">=</span> newServiceCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 读缓存
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">readCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> serviceCache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 清空缓存
     */</span>
    <span class="token keyword">void</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serviceCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果缓存中有，那么直接获取，就不用从Etcd中获取了</p><p>如果没有的话，那么就去搜索，根据前缀搜索，拿到结果之后再把服务进行解析为<code>List&lt;ServiceMetaInfo&gt;</code>的样子</p><p>最后还可以 写入缓存中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">serviceDiscovery</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 优先从缓存中获取</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfoList <span class="token operator">=</span> registryServiceCache<span class="token punctuation">.</span><span class="token function">readCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>serviceMetaInfoList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> serviceMetaInfoList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 前缀搜索，结尾一定要加 &#39;/&#39;</span>
    <span class="token class-name">String</span> searchPrefix <span class="token operator">=</span> <span class="token constant">ETCD_ROOT_PATH</span> <span class="token operator">+</span> serviceKey <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">GetOption</span> getOption <span class="token operator">=</span> <span class="token class-name">GetOption</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrefix</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeyValue</span><span class="token punctuation">&gt;</span></span> keyValues <span class="token operator">=</span> kvClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>searchPrefix<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getOption<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKvs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 解析服务</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">&gt;</span></span> serviceMetaInfos <span class="token operator">=</span> keyValues<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>keyValue <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> keyValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 监听key的变化</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入缓存</span>
        registryServiceCache<span class="token punctuation">.</span><span class="token function">writeCache</span><span class="token punctuation">(</span>serviceMetaInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> serviceMetaInfos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;服务发现失败&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务销毁" tabindex="-1"><a class="header-anchor" href="#服务销毁"><span>服务销毁</span></a></h4><p>当服务提供者关闭的时候，我们需要关闭所有注册的服务，同时也要删除本地即集合。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前节点下线&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 下线时，删除所有注册的服务</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> localRegisterNodeKeySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            kvClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;下线失败&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭客户端</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>kvClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        kvClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务下线分为：</p><ul><li>被动下线：Etcd过期机制删除</li><li>主动下线：提供者主动从注册中心删除</li></ul><p>如何在Java项目退出的时候，执行操作呢？我们可以 利用JVM的ShutDownHook来实现</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">RpcConfig</span> rpcConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">RpcConfig</span> newRpcConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rpcConfig <span class="token operator">=</span> newRpcConfig<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;rpc application init success,config:{}&quot;</span><span class="token punctuation">,</span> rpcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// // 注册中心初始化</span>
        <span class="token class-name">RegistryConfig</span> registryConfig <span class="token operator">=</span> rpcConfig<span class="token punctuation">.</span><span class="token function">getRegistryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">RegistryFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;registry init success,config:{}&quot;</span><span class="token punctuation">,</span> registryConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建并 注册Shutdown Hook ,JVM 退出时执行擦欧总</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>registry<span class="token operator">::</span><span class="token function">destroy</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="心跳检测" tabindex="-1"><a class="header-anchor" href="#心跳检测"><span>心跳检测</span></a></h4><p>我们向Etcd定期发送心跳信号来检测目标是否存活，如果系统在一定时间内没有响应，那么就 认为目标系统故障或者不可用了。</p><p>Etcd实现心跳检测比较简单，因为Etcd自带了key过期的机制。我们给节点注册的时候加上了过期时间，再让节点定期去续期，重置过期时间，如果节点宕机了，一直不去续期，那么Etcd会自动删除过期key。</p><p>因此我们的心跳检测只需要去定期的续约即可。</p><p>我们怎么知道服务提供者要去维护哪些节点呢？</p><p>只需要在本地维护一个注册节点信息集合，注册的时候把Key加入到集合中，每次维护集合的信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 100s续约一次</span>
    <span class="token class-name">CronUtil</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token string">&quot;*/10 * * * * *&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> localRegisterNodeKeySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KeyValue</span><span class="token punctuation">&gt;</span></span> keyValues <span class="token operator">=</span> kvClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKvs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 节点已经过期了，需要重启节点才能重新注册</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>keyValues<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 节点没有过期，重新 注册 相当于续约</span>
                    <span class="token class-name">KeyValue</span> keyValue <span class="token operator">=</span> keyValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> value <span class="token operator">=</span> keyValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">ServiceMetaInfo</span> serviceMetaInfo <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">ServiceMetaInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">register</span><span class="token punctuation">(</span>serviceMetaInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;续约失败&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 支持秒级别定时任务</span>
    <span class="token class-name">CronUtil</span><span class="token punctuation">.</span><span class="token function">setMatchSecond</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CronUtil</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务监听" tabindex="-1"><a class="header-anchor" href="#服务监听"><span>服务监听</span></a></h4><p>如果服务注册信息发生了变化，那么我们需要更新消费端缓存</p><p><img src="`+c+`" alt="watch.svg"></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceNodeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Watch</span> watchClient <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getWatchClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 之间未被监听，添加监听</span>
    <span class="token keyword">boolean</span> newWatch <span class="token operator">=</span> watchingKeySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serviceNodeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        watchClient<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token class-name">ByteSequence</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>serviceNodeKey<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WatchEvent</span> event <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> <span class="token constant">DELETE</span><span class="token operator">:</span>
                        registryServiceCache<span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token constant">PUT</span><span class="token operator">:</span>
                    <span class="token keyword">default</span><span class="token operator">:</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function b(g,y){const t=i("ExternalLinkIcon");return l(),u("div",null,[d,n("p",null,[s("在本章节中，我们实现Etcd作为注册中心。"),n("a",v,[s("https://etcd.io/"),k(t)])]),m])}const S=o(r,[["render",b],["__file","注册中心实现(Etcd).html.vue"]]),C=JSON.parse('{"path":"/docs/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E7%8E%B0(Etcd).html","title":"注册中心实现(Etcd)","lang":"en-US","frontmatter":{"date":"2024-05-03T00:00:00.000Z","title":"注册中心实现(Etcd)","order":6,"description":"注册中心实现(Etcd) 什么是注册中心？ 注册中心(Service Registry)是 RPC 框架中非常重要的一个组件,它的主要作用包括以下几点: 服务注册 服务提供者在启动时,会将自己的服务信息(如服务名、地址、端口等)注册到注册中心。 注册中心负责维护这些服务的注册信息,为服务消费者提供查询。 服务发现 服务消费者在需要调用服务时,会查询注册...","head":[["meta",{"property":"og:url","content":"https://github.com/yunfeidog/yunfei-rpc/docs/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E7%8E%B0(Etcd).html"}],["meta",{"property":"og:site_name","content":"手写RPC框架"}],["meta",{"property":"og:title","content":"注册中心实现(Etcd)"}],["meta",{"property":"og:description","content":"注册中心实现(Etcd) 什么是注册中心？ 注册中心(Service Registry)是 RPC 框架中非常重要的一个组件,它的主要作用包括以下几点: 服务注册 服务提供者在启动时,会将自己的服务信息(如服务名、地址、端口等)注册到注册中心。 注册中心负责维护这些服务的注册信息,为服务消费者提供查询。 服务发现 服务消费者在需要调用服务时,会查询注册..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-04T09:56:04.000Z"}],["meta",{"property":"article:author","content":"全民制作人iKun"}],["meta",{"property":"article:published_time","content":"2024-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-04T09:56:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注册中心实现(Etcd)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-04T09:56:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全民制作人iKun\\",\\"url\\":\\"http://yunfei.plus\\"}]}"]]},"headers":[{"level":2,"title":"什么是注册中心？","slug":"什么是注册中心","link":"#什么是注册中心","children":[{"level":3,"title":"注册中心有哪些？","slug":"注册中心有哪些","link":"#注册中心有哪些","children":[]}]},{"level":2,"title":"注册中心设计","slug":"注册中心设计","link":"#注册中心设计","children":[]},{"level":2,"title":"技术选型Etcd","slug":"技术选型etcd","link":"#技术选型etcd","children":[{"level":3,"title":"Etcd介绍","slug":"etcd介绍","link":"#etcd介绍","children":[]},{"level":3,"title":"服务元信息设计","slug":"服务元信息设计","link":"#服务元信息设计","children":[]},{"level":3,"title":"注册中心配置","slug":"注册中心配置","link":"#注册中心配置","children":[]},{"level":3,"title":"注册中心接口","slug":"注册中心接口","link":"#注册中心接口","children":[]},{"level":3,"title":"Etcd注册中心实现","slug":"etcd注册中心实现","link":"#etcd注册中心实现","children":[]}]}],"git":{"createdTime":1714716500000,"updatedTime":1714816564000,"contributors":[{"name":"yunfeidog","email":"1844025705@qq.com","commits":1}]},"readingTime":{"minutes":11.21,"words":3363},"filePathRelative":"docs/注册中心实现(Etcd).md","localizedDate":"May 3, 2024","excerpt":"\\n<h2>什么是注册中心？</h2>\\n<p>注册中心(Service Registry)是 RPC 框架中非常重要的一个组件,它的主要作用包括以下几点:</p>\\n<ol>\\n<li>\\n<p><strong>服务注册</strong></p>\\n<ul>\\n<li>服务提供者在启动时,会将自己的服务信息(如服务名、地址、端口等)注册到注册中心。</li>\\n<li>注册中心负责维护这些服务的注册信息,为服务消费者提供查询。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>服务发现</strong></p>\\n<ul>\\n<li>服务消费者在需要调用服务时,会查询注册中心获取可用的服务提供者信息。</li>\\n<li>注册中心根据负载均衡策略选择合适的服务实例,返回给消费者。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>服务状态管理</strong></p>\\n<ul>\\n<li>注册中心会定期检查服务实例的健康状态,并及时更新注册信息。</li>\\n<li>当某个服务实例下线或者故障时,注册中心会将其从服务列表中剔除。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>服务治理</strong></p>\\n<ul>\\n<li>注册中心可以提供服务分组、服务版本管理等功能,支持更细粒度的服务治理。</li>\\n<li>通过注册中心,可以实现服务的权重调整、灰度发布等高级特性。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{S as comp,C as data};
